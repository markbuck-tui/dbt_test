{"results": [{"node": {"name": "with_ar_agent", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_agent.sql", "original_file_path": "models\\with_ar_agent.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT DISTINCT\r\n  ag_1.agt_id\r\n  ,ag_1.def_mkt_id\r\n  ,ag_1.agt_tp_id\r\nFROM opa_stg_uk.ar_agent ag_1\r\nWHERE ag_1.file_dt = (SELECT MAX(ag_2.file_dt) FROM opa_stg_uk.ar_agent ag_2 WHERE ag_1.agt_id = ag_2.agt_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_agent", "empty": false, "fqn": ["dbt_test", "with_ar_agent"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_agent", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT DISTINCT\n  ag_1.agt_id\n  ,ag_1.def_mkt_id\n  ,ag_1.agt_tp_id\nFROM opa_stg_uk.ar_agent ag_1\nWHERE ag_1.file_dt = (SELECT MAX(ag_2.file_dt) FROM opa_stg_uk.ar_agent ag_2 WHERE ag_1.agt_id = ag_2.agt_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT DISTINCT\n  ag_1.agt_id\n  ,ag_1.def_mkt_id\n  ,ag_1.agt_tp_id\nFROM opa_stg_uk.ar_agent ag_1\nWHERE ag_1.file_dt = (SELECT MAX(ag_2.file_dt) FROM opa_stg_uk.ar_agent ag_2 WHERE ag_1.agt_id = ag_2.agt_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_agent.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 1.0889997482299805, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:53.467394Z", "completed_at": "2019-10-01T13:52:53.481394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:53.481394Z", "completed_at": "2019-10-01T13:52:54.052394Z"}]}, {"node": {"name": "with_ar_market", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_market.sql", "original_file_path": "models\\with_ar_market.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT DISTINCT\r\n  mk_1.mkt_id\r\n  ,mk_1.off_id\r\nFROM opa_stg_uk.ar_market mk_1\r\nWHERE mk_1.file_dt = (SELECT MAX(mk_2.file_dt) FROM opa_stg_uk.ar_market mk_2 WHERE mk_1.mkt_id = mk_2.mkt_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_market", "empty": false, "fqn": ["dbt_test", "with_ar_market"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_market", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT DISTINCT\n  mk_1.mkt_id\n  ,mk_1.off_id\nFROM opa_stg_uk.ar_market mk_1\nWHERE mk_1.file_dt = (SELECT MAX(mk_2.file_dt) FROM opa_stg_uk.ar_market mk_2 WHERE mk_1.mkt_id = mk_2.mkt_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT DISTINCT\n  mk_1.mkt_id\n  ,mk_1.off_id\nFROM opa_stg_uk.ar_market mk_1\nWHERE mk_1.file_dt = (SELECT MAX(mk_2.file_dt) FROM opa_stg_uk.ar_market mk_2 WHERE mk_1.mkt_id = mk_2.mkt_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_market.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5219998359680176, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:54.061394Z", "completed_at": "2019-10-01T13:52:54.077394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:54.077394Z", "completed_at": "2019-10-01T13:52:54.582394Z"}]}, {"node": {"name": "with_ar_officename", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_officename.sql", "original_file_path": "models\\with_ar_officename.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT DISTINCT\r\n  ofn_1.off_name_id\r\n  ,ofn_1.cd\r\n  ,ofn_1.name\r\n  -- ,sm.source_market_code\r\nFROM opa_stg_uk.ar_officename ofn_1\r\n-- LEFT OUTER JOIN opa_stg_all.source_market sm ON 'UKATCOM|' || ofn_1.cd = bk_source_market\r\nWHERE ofn_1.file_dt = (SELECT MAX(ofn_2.file_dt) FROM opa_stg_uk.ar_officename ofn_2 WHERE ofn_1.off_name_id = ofn_2.off_name_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_officename", "empty": false, "fqn": ["dbt_test", "with_ar_officename"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_officename", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT DISTINCT\n  ofn_1.off_name_id\n  ,ofn_1.cd\n  ,ofn_1.name\n  -- ,sm.source_market_code\nFROM opa_stg_uk.ar_officename ofn_1\n-- LEFT OUTER JOIN opa_stg_all.source_market sm ON 'UKATCOM|' || ofn_1.cd = bk_source_market\nWHERE ofn_1.file_dt = (SELECT MAX(ofn_2.file_dt) FROM opa_stg_uk.ar_officename ofn_2 WHERE ofn_1.off_name_id = ofn_2.off_name_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT DISTINCT\n  ofn_1.off_name_id\n  ,ofn_1.cd\n  ,ofn_1.name\n  -- ,sm.source_market_code\nFROM opa_stg_uk.ar_officename ofn_1\n-- LEFT OUTER JOIN opa_stg_all.source_market sm ON 'UKATCOM|' || ofn_1.cd = bk_source_market\nWHERE ofn_1.file_dt = (SELECT MAX(ofn_2.file_dt) FROM opa_stg_uk.ar_officename ofn_2 WHERE ofn_1.off_name_id = ofn_2.off_name_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_officename.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5099999904632568, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:54.589394Z", "completed_at": "2019-10-01T13:52:54.604394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:54.605394Z", "completed_at": "2019-10-01T13:52:55.098394Z"}]}, {"node": {"name": "with_ar_point", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_point.sql", "original_file_path": "models\\with_ar_point.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  p.pt_id\r\n  ,p.pt_cd\r\nFROM opa_stg_uk.ar_point p\r\nWHERE p.file_dt = (SELECT MAX(p_2.file_dt) FROM opa_stg_uk.ar_point p_2 WHERE p.pt_id = p_2.pt_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_point", "empty": false, "fqn": ["dbt_test", "with_ar_point"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_point", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  p.pt_id\n  ,p.pt_cd\nFROM opa_stg_uk.ar_point p\nWHERE p.file_dt = (SELECT MAX(p_2.file_dt) FROM opa_stg_uk.ar_point p_2 WHERE p.pt_id = p_2.pt_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  p.pt_id\n  ,p.pt_cd\nFROM opa_stg_uk.ar_point p\nWHERE p.file_dt = (SELECT MAX(p_2.file_dt) FROM opa_stg_uk.ar_point p_2 WHERE p.pt_id = p_2.pt_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_point.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5339999198913574, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:55.109394Z", "completed_at": "2019-10-01T13:52:55.128394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:55.128394Z", "completed_at": "2019-10-01T13:52:55.641394Z"}]}, {"node": {"name": "with_ar_sellstatic", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_sellstatic.sql", "original_file_path": "models\\with_ar_sellstatic.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  sls_1.sell_stc_id\r\n  ,sls_1.stc_stk_id\r\nFROM opa_stg_uk.ar_sellstatic sls_1\r\nWHERE sls_1.file_dt = (SELECT MAX(sls_2.file_dt) FROM opa_stg_uk.ar_sellstatic sls_2 WHERE sls_1.sell_stc_id = sls_2.sell_stc_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_sellstatic", "empty": false, "fqn": ["dbt_test", "with_ar_sellstatic"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_sellstatic", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  sls_1.sell_stc_id\n  ,sls_1.stc_stk_id\nFROM opa_stg_uk.ar_sellstatic sls_1\nWHERE sls_1.file_dt = (SELECT MAX(sls_2.file_dt) FROM opa_stg_uk.ar_sellstatic sls_2 WHERE sls_1.sell_stc_id = sls_2.sell_stc_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  sls_1.sell_stc_id\n  ,sls_1.stc_stk_id\nFROM opa_stg_uk.ar_sellstatic sls_1\nWHERE sls_1.file_dt = (SELECT MAX(sls_2.file_dt) FROM opa_stg_uk.ar_sellstatic sls_2 WHERE sls_1.sell_stc_id = sls_2.sell_stc_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_sellstatic.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5719997882843018, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:55.650394Z", "completed_at": "2019-10-01T13:52:55.670394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:55.670394Z", "completed_at": "2019-10-01T13:52:56.220394Z"}]}, {"node": {"name": "with_ar_sellunit", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_sellunit.sql", "original_file_path": "models\\with_ar_sellunit.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  su.sell_unit_id\r\n  ,su.rm_id\r\n  ,su.bb_cd_id\r\nFROM opa_stg_uk.ar_sellunit su\r\nWHERE su.file_dt = (SELECT MAX(su_2.file_dt) FROM opa_stg_uk.ar_sellunit su_2 WHERE su.sell_unit_id = su_2.sell_unit_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_sellunit", "empty": false, "fqn": ["dbt_test", "with_ar_sellunit"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_sellunit", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  su.sell_unit_id\n  ,su.rm_id\n  ,su.bb_cd_id\nFROM opa_stg_uk.ar_sellunit su\nWHERE su.file_dt = (SELECT MAX(su_2.file_dt) FROM opa_stg_uk.ar_sellunit su_2 WHERE su.sell_unit_id = su_2.sell_unit_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  su.sell_unit_id\n  ,su.rm_id\n  ,su.bb_cd_id\nFROM opa_stg_uk.ar_sellunit su\nWHERE su.file_dt = (SELECT MAX(su_2.file_dt) FROM opa_stg_uk.ar_sellunit su_2 WHERE su.sell_unit_id = su_2.sell_unit_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_sellunit.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.7260000705718994, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:56.231394Z", "completed_at": "2019-10-01T13:52:56.268394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:56.273394Z", "completed_at": "2019-10-01T13:52:56.953394Z"}]}, {"node": {"name": "with_ar_staticroom", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_staticroom.sql", "original_file_path": "models\\with_ar_staticroom.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  sr.stc_rm_id\r\n  ,sr.stc_stk_id\r\n  ,sr.rm_id\r\nFROM opa_stg_uk.ar_staticroom sr\r\nWHERE sr.file_dt = (SELECT MAX(sr_2.file_dt) FROM opa_stg_uk.ar_staticroom sr_2 WHERE sr.stc_rm_id = sr_2.stc_rm_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_staticroom", "empty": false, "fqn": ["dbt_test", "with_ar_staticroom"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_staticroom", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  sr.stc_rm_id\n  ,sr.stc_stk_id\n  ,sr.rm_id\nFROM opa_stg_uk.ar_staticroom sr\nWHERE sr.file_dt = (SELECT MAX(sr_2.file_dt) FROM opa_stg_uk.ar_staticroom sr_2 WHERE sr.stc_rm_id = sr_2.stc_rm_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  sr.stc_rm_id\n  ,sr.stc_stk_id\n  ,sr.rm_id\nFROM opa_stg_uk.ar_staticroom sr\nWHERE sr.file_dt = (SELECT MAX(sr_2.file_dt) FROM opa_stg_uk.ar_staticroom sr_2 WHERE sr.stc_rm_id = sr_2.stc_rm_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_staticroom.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.48199987411499023, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:56.965394Z", "completed_at": "2019-10-01T13:52:56.980394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:56.981394Z", "completed_at": "2019-10-01T13:52:57.446394Z"}]}, {"node": {"name": "with_ar_staticstock", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_staticstock.sql", "original_file_path": "models\\with_ar_staticstock.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  ss.stc_stk_id\r\n  ,ss.cd\r\nFROM opa_stg_uk.ar_staticstock ss\r\nWHERE ss.file_dt = (SELECT MAX(ss_2.file_dt) FROM opa_stg_uk.ar_staticstock ss_2 WHERE ss.stc_stk_id = ss_2.stc_stk_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_staticstock", "empty": false, "fqn": ["dbt_test", "with_ar_staticstock"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_staticstock", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  ss.stc_stk_id\n  ,ss.cd\nFROM opa_stg_uk.ar_staticstock ss\nWHERE ss.file_dt = (SELECT MAX(ss_2.file_dt) FROM opa_stg_uk.ar_staticstock ss_2 WHERE ss.stc_stk_id = ss_2.stc_stk_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  ss.stc_stk_id\n  ,ss.cd\nFROM opa_stg_uk.ar_staticstock ss\nWHERE ss.file_dt = (SELECT MAX(ss_2.file_dt) FROM opa_stg_uk.ar_staticstock ss_2 WHERE ss.stc_stk_id = ss_2.stc_stk_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_staticstock.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.47500014305114746, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:57.457394Z", "completed_at": "2019-10-01T13:52:57.472394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:57.472394Z", "completed_at": "2019-10-01T13:52:57.931394Z"}]}, {"node": {"name": "with_ar_transinvroute", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_transinvroute.sql", "original_file_path": "models\\with_ar_transinvroute.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  tir.trans_inv_route_id\r\n  ,tir.trans_route_id\r\nFROM opa_stg_uk.ar_transinvroute tir\r\nWHERE tir.file_dt = (SELECT MAX(tir_2.file_dt) FROM opa_stg_uk.ar_transinvroute tir_2 WHERE tir.trans_inv_route_id = tir_2.trans_inv_route_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_transinvroute", "empty": false, "fqn": ["dbt_test", "with_ar_transinvroute"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_transinvroute", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  tir.trans_inv_route_id\n  ,tir.trans_route_id\nFROM opa_stg_uk.ar_transinvroute tir\nWHERE tir.file_dt = (SELECT MAX(tir_2.file_dt) FROM opa_stg_uk.ar_transinvroute tir_2 WHERE tir.trans_inv_route_id = tir_2.trans_inv_route_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  tir.trans_inv_route_id\n  ,tir.trans_route_id\nFROM opa_stg_uk.ar_transinvroute tir\nWHERE tir.file_dt = (SELECT MAX(tir_2.file_dt) FROM opa_stg_uk.ar_transinvroute tir_2 WHERE tir.trans_inv_route_id = tir_2.trans_inv_route_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_transinvroute.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5590002536773682, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:57.945394Z", "completed_at": "2019-10-01T13:52:57.963394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:57.964394Z", "completed_at": "2019-10-01T13:52:58.501394Z"}]}, {"node": {"name": "with_ar_transinvroutesector", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_transinvroutesector.sql", "original_file_path": "models\\with_ar_transinvroutesector.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  tirs.trans_inv_route_id\r\n  ,tirs.trans_inv_sec_id\r\n  ,tirs.trans_inv_route_sec_id\r\nFROM opa_stg_uk.ar_transinvroutesector tirs\r\nWHERE tirs.file_dt = (SELECT MAX(tirs_2.file_dt) FROM opa_stg_uk.ar_transinvroutesector tirs_2 WHERE tirs.trans_inv_route_sec_id = tirs_2.trans_inv_route_sec_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_transinvroutesector", "empty": false, "fqn": ["dbt_test", "with_ar_transinvroutesector"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_transinvroutesector", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  tirs.trans_inv_route_id\n  ,tirs.trans_inv_sec_id\n  ,tirs.trans_inv_route_sec_id\nFROM opa_stg_uk.ar_transinvroutesector tirs\nWHERE tirs.file_dt = (SELECT MAX(tirs_2.file_dt) FROM opa_stg_uk.ar_transinvroutesector tirs_2 WHERE tirs.trans_inv_route_sec_id = tirs_2.trans_inv_route_sec_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  tirs.trans_inv_route_id\n  ,tirs.trans_inv_sec_id\n  ,tirs.trans_inv_route_sec_id\nFROM opa_stg_uk.ar_transinvroutesector tirs\nWHERE tirs.file_dt = (SELECT MAX(tirs_2.file_dt) FROM opa_stg_uk.ar_transinvroutesector tirs_2 WHERE tirs.trans_inv_route_sec_id = tirs_2.trans_inv_route_sec_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_transinvroutesector.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5100002288818359, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:58.511394Z", "completed_at": "2019-10-01T13:52:58.525394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:58.526394Z", "completed_at": "2019-10-01T13:52:59.020394Z"}]}, {"node": {"name": "with_ar_transinvsector", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_transinvsector.sql", "original_file_path": "models\\with_ar_transinvsector.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  tis.trans_inv_sec_id\r\n  ,tis.dep_dt_tm\r\nFROM opa_stg_uk.ar_transinvsector tis\r\nWHERE tis.file_dt = (SELECT MAX(tis_2.file_dt) FROM opa_stg_uk.ar_transinvsector tis_2 WHERE tis.trans_inv_sec_id = tis_2.trans_inv_sec_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_transinvsector", "empty": false, "fqn": ["dbt_test", "with_ar_transinvsector"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_transinvsector", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  tis.trans_inv_sec_id\n  ,tis.dep_dt_tm\nFROM opa_stg_uk.ar_transinvsector tis\nWHERE tis.file_dt = (SELECT MAX(tis_2.file_dt) FROM opa_stg_uk.ar_transinvsector tis_2 WHERE tis.trans_inv_sec_id = tis_2.trans_inv_sec_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  tis.trans_inv_sec_id\n  ,tis.dep_dt_tm\nFROM opa_stg_uk.ar_transinvsector tis\nWHERE tis.file_dt = (SELECT MAX(tis_2.file_dt) FROM opa_stg_uk.ar_transinvsector tis_2 WHERE tis.trans_inv_sec_id = tis_2.trans_inv_sec_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_transinvsector.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.557999849319458, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:59.028394Z", "completed_at": "2019-10-01T13:52:59.045394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:59.045394Z", "completed_at": "2019-10-01T13:52:59.584394Z"}]}, {"node": {"name": "with_ar_transroute", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_transroute.sql", "original_file_path": "models\\with_ar_transroute.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n\ttr.trans_route_id\r\n\t,tr.route_cd\r\nFROM opa_stg_uk.ar_transroute tr\r\nWHERE tr.file_dt = (SELECT MAX(tr_2.file_dt) FROM opa_stg_uk.ar_transroute tr_2 WHERE tr.trans_route_id = tr_2.trans_route_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_transroute", "empty": false, "fqn": ["dbt_test", "with_ar_transroute"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_transroute", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n\ttr.trans_route_id\n\t,tr.route_cd\nFROM opa_stg_uk.ar_transroute tr\nWHERE tr.file_dt = (SELECT MAX(tr_2.file_dt) FROM opa_stg_uk.ar_transroute tr_2 WHERE tr.trans_route_id = tr_2.trans_route_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n\ttr.trans_route_id\n\t,tr.route_cd\nFROM opa_stg_uk.ar_transroute tr\nWHERE tr.file_dt = (SELECT MAX(tr_2.file_dt) FROM opa_stg_uk.ar_transroute tr_2 WHERE tr.trans_route_id = tr_2.trans_route_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_transroute.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.505000114440918, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:52:59.609394Z", "completed_at": "2019-10-01T13:52:59.628394Z"}, {"name": "execute", "started_at": "2019-10-01T13:52:59.629394Z", "completed_at": "2019-10-01T13:53:00.112394Z"}]}, {"node": {"name": "with_ar_usercodes", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_usercodes.sql", "original_file_path": "models\\with_ar_usercodes.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT DISTINCT\r\n  uc_1.user_cd_id\r\n  ,uc_1.cd\r\n  ,uc_1.name\r\nFROM opa_stg_uk.ar_usercodes uc_1\r\nWHERE uc_1.file_dt = (SELECT MAX(uc_2.file_dt) FROM opa_stg_uk.ar_usercodes uc_2 WHERE uc_1.user_cd_id = uc_2.user_cd_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_usercodes", "empty": false, "fqn": ["dbt_test", "with_ar_usercodes"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_usercodes", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT DISTINCT\n  uc_1.user_cd_id\n  ,uc_1.cd\n  ,uc_1.name\nFROM opa_stg_uk.ar_usercodes uc_1\nWHERE uc_1.file_dt = (SELECT MAX(uc_2.file_dt) FROM opa_stg_uk.ar_usercodes uc_2 WHERE uc_1.user_cd_id = uc_2.user_cd_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT DISTINCT\n  uc_1.user_cd_id\n  ,uc_1.cd\n  ,uc_1.name\nFROM opa_stg_uk.ar_usercodes uc_1\nWHERE uc_1.file_dt = (SELECT MAX(uc_2.file_dt) FROM opa_stg_uk.ar_usercodes uc_2 WHERE uc_1.user_cd_id = uc_2.user_cd_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_usercodes.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5989997386932373, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:00.116394Z", "completed_at": "2019-10-01T13:53:00.126394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:00.126394Z", "completed_at": "2019-10-01T13:53:00.714394Z"}]}, {"node": {"name": "with_booking_fact_margin", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_booking_fact_margin.sql", "original_file_path": "models\\with_booking_fact_margin.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  bff_1.bk_booking\r\n  ,bff_1.ffd_flag\r\n  ,bff_1.sm_currency\r\n  ,bff_1.sm_revenue\r\n  ,bff_1.sm_cnx_and_amend_revenue\r\n  ,bff_1.sm_accommodation_costs\r\n  ,bff_1.sm_early_booking_discounts\r\n  ,bff_1.sm_late_booking_discounts\r\n  ,bff_1.sm_flying_costs\r\n  ,bff_1.sm_other_costs\r\n  ,bff_1.sm_distribution_costs\r\n  ,bff_1.sm_non_margin_items\r\n  ,bff_1.sm_margin\r\n  ,bff_1.smg_currency\r\n  ,bff_1.smg_revenue\r\n  ,bff_1.smg_cnx_and_amend_revenue\r\n  ,bff_1.smg_accommodation_costs\r\n  ,bff_1.smg_early_booking_discounts\r\n  ,bff_1.smg_late_booking_discounts\r\n  ,bff_1.smg_flying_costs\r\n  ,bff_1.smg_other_costs\r\n  ,bff_1.smg_distribution_costs\r\n  ,bff_1.smg_non_margin_items\r\n  ,bff_1.smg_margin\r\n  ,bff_1.rep_currency\r\n  ,bff_1.rep_revenue\r\n  ,bff_1.rep_cnx_and_amend_revenue\r\n  ,bff_1.rep_accommodation_costs\r\n  ,bff_1.rep_early_booking_discounts\r\n  ,bff_1.rep_late_booking_discounts\r\n  ,bff_1.rep_flying_costs\r\n  ,bff_1.rep_other_costs\r\n  ,bff_1.rep_distribution_costs\r\n  ,bff_1.rep_non_margin_items\r\n  ,bff_1.rep_margin\r\nFROM opa_fl_uk.v_booking_fact_margin_uk bff_1", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_booking_fact_margin", "empty": false, "fqn": ["dbt_test", "with_booking_fact_margin"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_booking_fact_margin", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  bff_1.bk_booking\n  ,bff_1.ffd_flag\n  ,bff_1.sm_currency\n  ,bff_1.sm_revenue\n  ,bff_1.sm_cnx_and_amend_revenue\n  ,bff_1.sm_accommodation_costs\n  ,bff_1.sm_early_booking_discounts\n  ,bff_1.sm_late_booking_discounts\n  ,bff_1.sm_flying_costs\n  ,bff_1.sm_other_costs\n  ,bff_1.sm_distribution_costs\n  ,bff_1.sm_non_margin_items\n  ,bff_1.sm_margin\n  ,bff_1.smg_currency\n  ,bff_1.smg_revenue\n  ,bff_1.smg_cnx_and_amend_revenue\n  ,bff_1.smg_accommodation_costs\n  ,bff_1.smg_early_booking_discounts\n  ,bff_1.smg_late_booking_discounts\n  ,bff_1.smg_flying_costs\n  ,bff_1.smg_other_costs\n  ,bff_1.smg_distribution_costs\n  ,bff_1.smg_non_margin_items\n  ,bff_1.smg_margin\n  ,bff_1.rep_currency\n  ,bff_1.rep_revenue\n  ,bff_1.rep_cnx_and_amend_revenue\n  ,bff_1.rep_accommodation_costs\n  ,bff_1.rep_early_booking_discounts\n  ,bff_1.rep_late_booking_discounts\n  ,bff_1.rep_flying_costs\n  ,bff_1.rep_other_costs\n  ,bff_1.rep_distribution_costs\n  ,bff_1.rep_non_margin_items\n  ,bff_1.rep_margin\nFROM opa_fl_uk.v_booking_fact_margin_uk bff_1", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  bff_1.bk_booking\n  ,bff_1.ffd_flag\n  ,bff_1.sm_currency\n  ,bff_1.sm_revenue\n  ,bff_1.sm_cnx_and_amend_revenue\n  ,bff_1.sm_accommodation_costs\n  ,bff_1.sm_early_booking_discounts\n  ,bff_1.sm_late_booking_discounts\n  ,bff_1.sm_flying_costs\n  ,bff_1.sm_other_costs\n  ,bff_1.sm_distribution_costs\n  ,bff_1.sm_non_margin_items\n  ,bff_1.sm_margin\n  ,bff_1.smg_currency\n  ,bff_1.smg_revenue\n  ,bff_1.smg_cnx_and_amend_revenue\n  ,bff_1.smg_accommodation_costs\n  ,bff_1.smg_early_booking_discounts\n  ,bff_1.smg_late_booking_discounts\n  ,bff_1.smg_flying_costs\n  ,bff_1.smg_other_costs\n  ,bff_1.smg_distribution_costs\n  ,bff_1.smg_non_margin_items\n  ,bff_1.smg_margin\n  ,bff_1.rep_currency\n  ,bff_1.rep_revenue\n  ,bff_1.rep_cnx_and_amend_revenue\n  ,bff_1.rep_accommodation_costs\n  ,bff_1.rep_early_booking_discounts\n  ,bff_1.rep_late_booking_discounts\n  ,bff_1.rep_flying_costs\n  ,bff_1.rep_other_costs\n  ,bff_1.rep_distribution_costs\n  ,bff_1.rep_non_margin_items\n  ,bff_1.rep_margin\nFROM opa_fl_uk.v_booking_fact_margin_uk bff_1", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_booking_fact_margin.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.9860000610351562, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:00.720394Z", "completed_at": "2019-10-01T13:53:00.731394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:00.731394Z", "completed_at": "2019-10-01T13:53:01.706394Z"}]}, {"node": {"name": "with_dates", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_dates.sql", "original_file_path": "models\\with_dates.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\n\r\nSELECT\r\n\tdd.bk_date\r\n\t,dd.group_season_code\r\nFROM opa_stg_all.date_dim dd", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_dates", "empty": false, "fqn": ["dbt_test", "with_dates"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_dates", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\n\nSELECT\n\tdd.bk_date\n\t,dd.group_season_code\nFROM opa_stg_all.date_dim dd", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nSELECT\n\tdd.bk_date\n\t,dd.group_season_code\nFROM opa_stg_all.date_dim dd", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_dates.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.49700021743774414, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:01.715394Z", "completed_at": "2019-10-01T13:53:01.723394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:01.724394Z", "completed_at": "2019-10-01T13:53:02.211394Z"}]}, {"node": {"name": "with_fl_acr_booking", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_fl_acr_booking.sql", "original_file_path": "models\\with_fl_acr_booking.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  bk_1.sk_booking_id\r\n  ,bk_1.booking_version\r\n  ,bk_1.atcom_res_id\r\n  ,bk_1.atcom_res_version\r\n  ,bk_1.atcom_market_id -- CG ADDED in V1.06 for new Source Market Derivation\r\n  ,bk_1.number_of_adults\r\n  ,bk_1.number_of_children\r\n  ,bk_1.number_of_infants\r\n  ,bk_1.number_of_passengers\r\n  ,bk_1.sk_season_id\r\n  ,bk_1.booking_status\r\n  ,bk_1.atcom_agent_id\r\n  ,bk_1.atcom_sell_currency_id\r\n  ,bk_1.season_date\r\n  ,bk_1.confirmed_on\r\n  ,bk_1.cancelled_on\r\n  ,bk_1.source_created_on\r\n  ,bk_1.modified_on\r\n  ,bk_1.effective_from\r\n  ,DATEADD('second', -1, LEAD(bk_1.effective_from) OVER (PARTITION BY bk_1.sk_booking_id ORDER BY bk_1.booking_version)) AS lead_effective_from\r\n  ,bk_1.effective_to\r\n  ,bk_1.dwh_created_on\r\n  ,bk_1.dwh_modified_on\r\n\r\nFROM opa_stg_uk.fl_acr_booking bk_1\r\nWHERE bk_1.file_dt = (SELECT MAX(bk_2.file_dt) FROM opa_stg_uk.fl_acr_booking bk_2 WHERE bk_1.sk_booking_id = bk_2.sk_booking_id AND bk_1.booking_version = bk_2.booking_version)\r\nAND bk_1.booking_version = (SELECT MAX(bk_3.booking_version) FROM opa_stg_uk.fl_acr_booking bk_3 WHERE bk_1.sk_booking_id = bk_3.sk_booking_id)\r\nAND (bk_1.sk_season_id > 201701 OR bk_1.sk_booking_id IS NULL)\r\n\r\n-- To be removed when running against all bookings\r\nAND bk_1.sk_booking_id IN ('380402','975528','10016009','10063844','15994298','22568921','25059884','27813713','28536240','30846203','33404409','20348866','31280892','35353771')", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_fl_acr_booking", "empty": false, "fqn": ["dbt_test", "with_fl_acr_booking"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_fl_acr_booking", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  bk_1.sk_booking_id\n  ,bk_1.booking_version\n  ,bk_1.atcom_res_id\n  ,bk_1.atcom_res_version\n  ,bk_1.atcom_market_id -- CG ADDED in V1.06 for new Source Market Derivation\n  ,bk_1.number_of_adults\n  ,bk_1.number_of_children\n  ,bk_1.number_of_infants\n  ,bk_1.number_of_passengers\n  ,bk_1.sk_season_id\n  ,bk_1.booking_status\n  ,bk_1.atcom_agent_id\n  ,bk_1.atcom_sell_currency_id\n  ,bk_1.season_date\n  ,bk_1.confirmed_on\n  ,bk_1.cancelled_on\n  ,bk_1.source_created_on\n  ,bk_1.modified_on\n  ,bk_1.effective_from\n  ,DATEADD('second', -1, LEAD(bk_1.effective_from) OVER (PARTITION BY bk_1.sk_booking_id ORDER BY bk_1.booking_version)) AS lead_effective_from\n  ,bk_1.effective_to\n  ,bk_1.dwh_created_on\n  ,bk_1.dwh_modified_on\n\nFROM opa_stg_uk.fl_acr_booking bk_1\nWHERE bk_1.file_dt = (SELECT MAX(bk_2.file_dt) FROM opa_stg_uk.fl_acr_booking bk_2 WHERE bk_1.sk_booking_id = bk_2.sk_booking_id AND bk_1.booking_version = bk_2.booking_version)\nAND bk_1.booking_version = (SELECT MAX(bk_3.booking_version) FROM opa_stg_uk.fl_acr_booking bk_3 WHERE bk_1.sk_booking_id = bk_3.sk_booking_id)\nAND (bk_1.sk_season_id > 201701 OR bk_1.sk_booking_id IS NULL)\n\n-- To be removed when running against all bookings\nAND bk_1.sk_booking_id IN ('380402','975528','10016009','10063844','15994298','22568921','25059884','27813713','28536240','30846203','33404409','20348866','31280892','35353771')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  bk_1.sk_booking_id\n  ,bk_1.booking_version\n  ,bk_1.atcom_res_id\n  ,bk_1.atcom_res_version\n  ,bk_1.atcom_market_id -- CG ADDED in V1.06 for new Source Market Derivation\n  ,bk_1.number_of_adults\n  ,bk_1.number_of_children\n  ,bk_1.number_of_infants\n  ,bk_1.number_of_passengers\n  ,bk_1.sk_season_id\n  ,bk_1.booking_status\n  ,bk_1.atcom_agent_id\n  ,bk_1.atcom_sell_currency_id\n  ,bk_1.season_date\n  ,bk_1.confirmed_on\n  ,bk_1.cancelled_on\n  ,bk_1.source_created_on\n  ,bk_1.modified_on\n  ,bk_1.effective_from\n  ,DATEADD('second', -1, LEAD(bk_1.effective_from) OVER (PARTITION BY bk_1.sk_booking_id ORDER BY bk_1.booking_version)) AS lead_effective_from\n  ,bk_1.effective_to\n  ,bk_1.dwh_created_on\n  ,bk_1.dwh_modified_on\n\nFROM opa_stg_uk.fl_acr_booking bk_1\nWHERE bk_1.file_dt = (SELECT MAX(bk_2.file_dt) FROM opa_stg_uk.fl_acr_booking bk_2 WHERE bk_1.sk_booking_id = bk_2.sk_booking_id AND bk_1.booking_version = bk_2.booking_version)\nAND bk_1.booking_version = (SELECT MAX(bk_3.booking_version) FROM opa_stg_uk.fl_acr_booking bk_3 WHERE bk_1.sk_booking_id = bk_3.sk_booking_id)\nAND (bk_1.sk_season_id > 201701 OR bk_1.sk_booking_id IS NULL)\n\n-- To be removed when running against all bookings\nAND bk_1.sk_booking_id IN ('380402','975528','10016009','10063844','15994298','22568921','25059884','27813713','28536240','30846203','33404409','20348866','31280892','35353771')", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_fl_acr_booking.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5930001735687256, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:02.224394Z", "completed_at": "2019-10-01T13:53:02.240394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:02.241394Z", "completed_at": "2019-10-01T13:53:02.815394Z"}]}, {"node": {"name": "with_fl_acr_booking_service", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_fl_acr_booking_service.sql", "original_file_path": "models\\with_fl_acr_booking_service.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  bk_ser_1.sk_booking_service_id\r\n  ,bk_ser_1.sk_booking_id\r\n  ,bk_ser_1.sk_service_id\r\n  ,bk_ser_1.service_version\r\n  ,bk_ser_1.booking_version\r\nFROM opa_stg_uk.fl_acr_booking_service bk_ser_1\r\nWHERE bk_ser_1.file_dt = (SELECT MAX(bk_ser_2.file_dt) FROM opa_stg_uk.fl_acr_booking_service bk_ser_2 WHERE bk_ser_1.sk_booking_service_id = bk_ser_2.sk_booking_service_id)\r\nAND bk_ser_1.booking_version = (SELECT MAX(bk_ser_3.booking_version) FROM opa_stg_uk.fl_acr_booking_service bk_ser_3 WHERE bk_ser_1.sk_booking_id = bk_ser_3.sk_booking_id)\r\nAND bk_ser_1.service_version = (SELECT MAX(bk_ser_4.service_version) FROM opa_stg_uk.fl_acr_booking_service bk_ser_4 WHERE bk_ser_1.sk_service_id = bk_ser_4.sk_service_id)\r\n\r\n-- To be removed when running against all bookings\r\nAND bk_ser_1.sk_booking_id IN ('380402','975528','10016009','10063844','15994298','22568921','25059884','27813713','28536240','30846203','33404409','20348866','31280892','35353771')", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_fl_acr_booking_service", "empty": false, "fqn": ["dbt_test", "with_fl_acr_booking_service"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_fl_acr_booking_service", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  bk_ser_1.sk_booking_service_id\n  ,bk_ser_1.sk_booking_id\n  ,bk_ser_1.sk_service_id\n  ,bk_ser_1.service_version\n  ,bk_ser_1.booking_version\nFROM opa_stg_uk.fl_acr_booking_service bk_ser_1\nWHERE bk_ser_1.file_dt = (SELECT MAX(bk_ser_2.file_dt) FROM opa_stg_uk.fl_acr_booking_service bk_ser_2 WHERE bk_ser_1.sk_booking_service_id = bk_ser_2.sk_booking_service_id)\nAND bk_ser_1.booking_version = (SELECT MAX(bk_ser_3.booking_version) FROM opa_stg_uk.fl_acr_booking_service bk_ser_3 WHERE bk_ser_1.sk_booking_id = bk_ser_3.sk_booking_id)\nAND bk_ser_1.service_version = (SELECT MAX(bk_ser_4.service_version) FROM opa_stg_uk.fl_acr_booking_service bk_ser_4 WHERE bk_ser_1.sk_service_id = bk_ser_4.sk_service_id)\n\n-- To be removed when running against all bookings\nAND bk_ser_1.sk_booking_id IN ('380402','975528','10016009','10063844','15994298','22568921','25059884','27813713','28536240','30846203','33404409','20348866','31280892','35353771')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  bk_ser_1.sk_booking_service_id\n  ,bk_ser_1.sk_booking_id\n  ,bk_ser_1.sk_service_id\n  ,bk_ser_1.service_version\n  ,bk_ser_1.booking_version\nFROM opa_stg_uk.fl_acr_booking_service bk_ser_1\nWHERE bk_ser_1.file_dt = (SELECT MAX(bk_ser_2.file_dt) FROM opa_stg_uk.fl_acr_booking_service bk_ser_2 WHERE bk_ser_1.sk_booking_service_id = bk_ser_2.sk_booking_service_id)\nAND bk_ser_1.booking_version = (SELECT MAX(bk_ser_3.booking_version) FROM opa_stg_uk.fl_acr_booking_service bk_ser_3 WHERE bk_ser_1.sk_booking_id = bk_ser_3.sk_booking_id)\nAND bk_ser_1.service_version = (SELECT MAX(bk_ser_4.service_version) FROM opa_stg_uk.fl_acr_booking_service bk_ser_4 WHERE bk_ser_1.sk_service_id = bk_ser_4.sk_service_id)\n\n-- To be removed when running against all bookings\nAND bk_ser_1.sk_booking_id IN ('380402','975528','10016009','10063844','15994298','22568921','25059884','27813713','28536240','30846203','33404409','20348866','31280892','35353771')", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_fl_acr_booking_service.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5470001697540283, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:02.828394Z", "completed_at": "2019-10-01T13:53:02.851394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:02.852394Z", "completed_at": "2019-10-01T13:53:03.373394Z"}]}, {"node": {"name": "with_fl_acr_service", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_fl_acr_service.sql", "original_file_path": "models\\with_fl_acr_service.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  ser_1.sk_service_id\r\n  ,ser_1.atcom_ser_id\r\n  ,ser_1.atcom_dep_point_id\r\n  ,ser_1.service_version\r\n  ,ser_1.service_status\r\n  ,ser_1.direction\r\n  ,ser_1.sell_type\r\n  ,ser_1.service_type\r\n  ,ser_1.flight_type_code\r\n  ,ser_1.service_start_date1\r\n  ,ser_1.service_end_date1\r\n  ,ser_1.departure_flight_number\r\n  ,ser_1.atcom_arr_point_id\r\n  ,ser_1.source_stock_type_code\r\nFROM opa_stg_uk.fl_acr_service ser_1\r\nWHERE ser_1.file_dt = (SELECT MAX(ser_2.file_dt) FROM opa_stg_uk.fl_acr_service ser_2 WHERE ser_1.sk_service_id = ser_2.sk_service_id AND ser_1.service_version = ser_2.service_version)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_fl_acr_service", "empty": false, "fqn": ["dbt_test", "with_fl_acr_service"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_fl_acr_service", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  ser_1.sk_service_id\n  ,ser_1.atcom_ser_id\n  ,ser_1.atcom_dep_point_id\n  ,ser_1.service_version\n  ,ser_1.service_status\n  ,ser_1.direction\n  ,ser_1.sell_type\n  ,ser_1.service_type\n  ,ser_1.flight_type_code\n  ,ser_1.service_start_date1\n  ,ser_1.service_end_date1\n  ,ser_1.departure_flight_number\n  ,ser_1.atcom_arr_point_id\n  ,ser_1.source_stock_type_code\nFROM opa_stg_uk.fl_acr_service ser_1\nWHERE ser_1.file_dt = (SELECT MAX(ser_2.file_dt) FROM opa_stg_uk.fl_acr_service ser_2 WHERE ser_1.sk_service_id = ser_2.sk_service_id AND ser_1.service_version = ser_2.service_version)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  ser_1.sk_service_id\n  ,ser_1.atcom_ser_id\n  ,ser_1.atcom_dep_point_id\n  ,ser_1.service_version\n  ,ser_1.service_status\n  ,ser_1.direction\n  ,ser_1.sell_type\n  ,ser_1.service_type\n  ,ser_1.flight_type_code\n  ,ser_1.service_start_date1\n  ,ser_1.service_end_date1\n  ,ser_1.departure_flight_number\n  ,ser_1.atcom_arr_point_id\n  ,ser_1.source_stock_type_code\nFROM opa_stg_uk.fl_acr_service ser_1\nWHERE ser_1.file_dt = (SELECT MAX(ser_2.file_dt) FROM opa_stg_uk.fl_acr_service ser_2 WHERE ser_1.sk_service_id = ser_2.sk_service_id AND ser_1.service_version = ser_2.service_version)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_fl_acr_service.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.5720000267028809, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:03.383394Z", "completed_at": "2019-10-01T13:53:03.408394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:03.408394Z", "completed_at": "2019-10-01T13:53:03.954394Z"}]}, {"node": {"name": "with_fl_acr_service_element", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_fl_acr_service_element.sql", "original_file_path": "models\\with_fl_acr_service_element.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT\r\n  ser_e_1.sk_service_id\r\n  ,ser_e_1.service_version\r\n  ,ser_e_1.atcom_sub_ser_id\r\nFROM opa_stg_uk.fl_acr_service_element ser_e_1\r\nWHERE ser_e_1.file_dt = (SELECT MAX(ser_e_2.file_dt) FROM opa_stg_uk.fl_acr_service_element ser_e_2 WHERE ser_e_1.sk_service_element_id = ser_e_2.sk_service_element_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_fl_acr_service_element", "empty": false, "fqn": ["dbt_test", "with_fl_acr_service_element"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_fl_acr_service_element", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n  ser_e_1.sk_service_id\n  ,ser_e_1.service_version\n  ,ser_e_1.atcom_sub_ser_id\nFROM opa_stg_uk.fl_acr_service_element ser_e_1\nWHERE ser_e_1.file_dt = (SELECT MAX(ser_e_2.file_dt) FROM opa_stg_uk.fl_acr_service_element ser_e_2 WHERE ser_e_1.sk_service_element_id = ser_e_2.sk_service_element_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n  ser_e_1.sk_service_id\n  ,ser_e_1.service_version\n  ,ser_e_1.atcom_sub_ser_id\nFROM opa_stg_uk.fl_acr_service_element ser_e_1\nWHERE ser_e_1.file_dt = (SELECT MAX(ser_e_2.file_dt) FROM opa_stg_uk.fl_acr_service_element ser_e_2 WHERE ser_e_1.sk_service_element_id = ser_e_2.sk_service_element_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_fl_acr_service_element.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.6919999122619629, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:03.970394Z", "completed_at": "2019-10-01T13:53:04.019394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:04.020394Z", "completed_at": "2019-10-01T13:53:04.660394Z"}]}, {"node": {"name": "with_ar_currency", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "with_ar_currency.sql", "original_file_path": "models\\with_ar_currency.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='view')\r\n}}\r\n\r\nSELECT DISTINCT\r\n  cur_1.cur_id\r\n  ,cur_1.cd\r\n  ,cur_1.name\r\nFROM opa_stg_uk.ar_currency cur_1\r\nWHERE cur_1.file_dt = (SELECT MAX(cur_2.file_dt) FROM opa_stg_uk.ar_currency cur_2 WHERE cur_1.cur_id = cur_2.cur_id)", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_test.with_ar_currency", "empty": false, "fqn": ["dbt_test", "with_ar_currency"], "tags": [], "config": {"enabled": true, "materialized": "view", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "with_ar_currency", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT DISTINCT\n  cur_1.cur_id\n  ,cur_1.cd\n  ,cur_1.name\nFROM opa_stg_uk.ar_currency cur_1\nWHERE cur_1.file_dt = (SELECT MAX(cur_2.file_dt) FROM opa_stg_uk.ar_currency cur_2 WHERE cur_1.cur_id = cur_2.cur_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT DISTINCT\n  cur_1.cur_id\n  ,cur_1.cd\n  ,cur_1.name\nFROM opa_stg_uk.ar_currency cur_1\nWHERE cur_1.file_dt = (SELECT MAX(cur_2.file_dt) FROM opa_stg_uk.ar_currency cur_2 WHERE cur_1.cur_id = cur_2.cur_id)", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\with_ar_currency.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 0.6449999809265137, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:04.683394Z", "completed_at": "2019-10-01T13:53:04.704394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:04.705394Z", "completed_at": "2019-10-01T13:53:05.321394Z"}]}, {"node": {"name": "booking_fact_uk", "root_path": "C:\\Users\\EXTMB2\\github\\dbt_test", "resource_type": "model", "path": "booking_fact_uk.sql", "original_file_path": "models\\booking_fact_uk.sql", "package_name": "dbt_test", "raw_sql": "{{\r\n  config(materialized='table')\r\n}}\r\n\r\nWITH booking_service AS (\r\n\tSELECT\r\n\t\tbk_ser.sk_booking_id\r\n\t\t,bk_ser.booking_version\r\n\t\t,bk_ser.sk_service_id\r\n\t\t,bk_ser.service_version\r\n\t\t,bk_ser.sk_booking_service_id\r\n\t\t,ser.service_type\r\n\t\t,ser.source_stock_type_code\r\n\t\t,ser.sell_type\r\n\t\t,ser.service_status\r\n\t\t,ser.flight_type_code\r\n\t\t,ser.service_start_date1\r\n\t\t,ser.service_end_date1\r\n\t\t,tis.dep_dt_tm\r\n\t\t,ser.departure_flight_number\r\n\t\t,ser.direction\r\n\t\t,tr.route_cd\r\n\t\t,dpt.pt_cd\r\n\t\t,CASE WHEN\r\n\t\t\t-- All flight cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tCASE WHEN\r\n\t\t\t\tser.service_start_date1 =\r\n\t\t\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\t\tTHEN ser.service_start_date1\r\n\t\t\t\t\t\tELSE NULL\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\tTHEN apt.pt_cd\r\n\t\t\t\tELSE NULL\r\n\t\t\tEND\r\n\t\tELSE\r\n\t\t\tCASE WHEN\r\n\t\t\t\tser.service_start_date1 =\r\n\t\t\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\t\tTHEN ser.service_start_date1\r\n\t\t\t\t\t\tELSE NULL\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\tAND ser.service_status = 'CON'\r\n\t\t\t\tTHEN apt.pt_cd\r\n\t\t\t\tELSE NULL\r\n\t\t\tEND\r\n\t\tEND AS min_flight_gateway\r\n\r\n\t\t,CASE WHEN\r\n\t\t\t-- All flight cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tCASE WHEN\r\n\t\t\t\tser.service_start_date1 =\r\n\t\t\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\t\tTHEN ser.service_start_date1\r\n\t\t\t\t\t\tELSE NULL\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\tTHEN\r\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\r\n\t\t\t\t\t\tTHEN\r\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\r\n\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\r\n\t\t\t\t\t\tEND\r\n\t\t\t\tELSE NULL\r\n\t\t\tEND\r\n\t\tELSE\r\n\t\t\tCASE WHEN\r\n\t\t\t\tser.service_start_date1 =\r\n\t\t\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\t\tTHEN ser.service_start_date1\r\n\t\t\t\t\t\tELSE NULL\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\tAND ser.service_status = 'CON'\r\n\t\t\t\tTHEN\r\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\r\n\t\t\t\t\t\tTHEN\r\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\r\n\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\r\n\t\t\t\t\t\tEND\r\n\t\t\t\tELSE NULL\r\n\t\t\tEND\r\n\t\tEND\tAS min_flight_id\r\n\r\n\t\t,CASE WHEN\r\n\t\t\t-- All flight cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tCASE WHEN\r\n\t\t\t\tser.service_start_date1 =\r\n\t\t\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\t\tTHEN ser.service_start_date1\r\n\t\t\t\t\t\tELSE NULL\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\tTHEN\r\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\r\n\t\t\t\t\t\tTHEN\r\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\r\n\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\r\n\t\t\t\t\t\tEND\r\n\t\t\t\tELSE NULL\r\n\t\t\tEND\r\n\t\tELSE\r\n\t\t\tCASE WHEN\r\n\t\t\t\tser.service_start_date1 =\r\n\t\t\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\t\tTHEN ser.service_start_date1\r\n\t\t\t\t\t\tELSE NULL\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\tAND ser.service_status = 'CON'\r\n\t\t\t\tTHEN\r\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\r\n\t\t\t\t\t\tTHEN\r\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\r\n\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\r\n\t\t\t\t\t\tEND\r\n\t\t\t\tELSE NULL\r\n\t\t\tEND\r\n\t\tEND AS max_flight_id\r\n\r\n\r\n\t\t-- MULTICENTRE\r\n\t\t,CASE WHEN\r\n\t\t\t-- All multicentre services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND\tAS min_multi_center_date\r\n\r\n\t\t,CASE WHEN\r\n\t\t\t-- All multicentre services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\r\n\t\t\t\tTHEN ser.service_end_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\r\n\t\t\t\tTHEN ser.service_end_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND AS max_multi_center_date\r\n\r\n\r\n\t\t-- ACCOM\r\n\t\t,CASE WHEN\r\n\t\t\t-- All accom services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU'))\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND AS min_accom_date\r\n\t\t,CASE WHEN\r\n\t\t\t-- All accom services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU'))\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\r\n\t\t\t\tTHEN ser.service_end_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\r\n\t\t\t\tTHEN ser.service_end_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND AS max_accom_date\r\n\r\n\r\n\t\t-- CRUISE\r\n\t\t,CASE WHEN\r\n\t\t\t-- All accom services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU')\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CON')\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND AS min_cruise_date\r\n\t\t,CASE WHEN\r\n\t\t\t-- All accom services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU')\r\n\t\t\t\tTHEN ser.service_end_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CON')\r\n\t\t\t\tTHEN ser.service_end_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND max_cruise_date\r\n\r\n\r\n\t\t-- FLIGHT\r\n\t\t,CASE WHEN\r\n\t\t\t-- All flight services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\r\n\t\t\t\t--THEN tis.dep_dt_tm END)\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMIN(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t--THEN tis.dep_dt_tm END)\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND AS min_flight_date\r\n\t\t,CASE WHEN\r\n\t\t\t-- All flight services cancelled\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t=\r\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tTHEN\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\r\n\t\t\t\t--THEN tis.dep_dt_tm END)\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tELSE\r\n\t\t\tMAX(CASE WHEN\r\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\r\n\t\t\t\t--THEN tis.dep_dt_tm END)\r\n\t\t\t\tTHEN ser.service_start_date1 END)\r\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\tEND\tAS max_flight_date\r\n\r\n\t\t,sts.cd AS accom\r\n\t\t,su.bb_cd_id AS board_cd\r\n\t\t,uc_3.name AS board_name\r\n\t\t,str.stc_rm_id AS room\r\n\r\n\t\t-- Booking type derivation part 1\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- No outbound flight services on the booking are third party\r\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\r\n\t\tTHEN 0\r\n\t\tELSE\r\n\t\t\tCASE WHEN\r\n\t\t\t\t-- All outbound flight services are 3PF\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t=\r\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\r\n\t\t\tOR\r\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\r\n\t\t\tTHEN 1\r\n\t\t\tELSE 0\r\n\t\t\tEND\r\n\t\tEND AS tpf_out_count\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- No outbound flight services on the booking are third party\r\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\r\n\t\tTHEN 0\r\n\t\tELSE\r\n\t\t\tCASE WHEN\r\n\t\t\t\t-- All outbound flight services are 3PF\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t=\r\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\r\n\t\t\tOR\r\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\r\n\t\t\tTHEN 1\r\n\t\t\tELSE 0\r\n\t\t\tEND\r\n\t\tEND AS tpf_in_count\r\n\t\t,CASE WHEN\r\n\t\t\t\tCASE WHEN\r\n\t\t\t\t\t\t-- No outbound flight services on the booking are third party\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\r\n\t\t\t\tTHEN 0\r\n\t\t\t\tELSE\r\n\t\t\t\t\tCASE WHEN\r\n\t\t\t\t\t\t-- All outbound flight services are 3PF\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\t\t=\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\r\n\t\t\t\t\tOR\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\r\n\t\t\t\t\tTHEN 1\r\n\t\t\t\t\tELSE 0\r\n\t\t\t\t\tEND\r\n\t\t\t\tEND\r\n\t\t\t+\r\n\t\t\t\tCASE WHEN\r\n\t\t\t\t\t\t-- No outbound flight services on the booking are third party\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\r\n\t\t\t\tTHEN 0\r\n\t\t\t\tELSE\r\n\t\t\t\t\tCASE WHEN\r\n\t\t\t\t\t\t-- All outbound flight services are 3PF\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t\t\t=\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\r\n\t\t\t\t\tOR\r\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\r\n\t\t\t\t\tTHEN 1\r\n\t\t\t\t\tELSE 0\r\n\t\t\t\t\tEND\r\n\t\t\t\tEND\r\n\t\t> 0\r\n\t\t\tTHEN 'Y'\r\n\t\t\tELSE 'N'\r\n\t\tEND AS tpf_indicator\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All accom cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON' THEN 1 ELSE 0 END\r\n\t\tEND AS accom_count\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All cruise cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\r\n\t\tEND AS cruise_count\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All flight out cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\r\n\t\tEND AS flight_out_count\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All flight in cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\r\n\t\tEND AS flight_ret_count\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All ahoc services cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'AHOC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'AHOC' THEN 1 ELSE 0 END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'AHOC' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\r\n\t\tEND AS thirdparty_count\r\n\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All flight out first date cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN ser.service_start_date1 ELSE NULL END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN ser.service_start_date1 ELSE NULL END\r\n\t\tEND AS flight_out_first_date\r\n\t\t,CASE WHEN\r\n\t\t\t\t-- All flight in first date cancelled\r\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\r\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN ser.service_start_date1 ELSE NULL END\r\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN ser.service_start_date1 ELSE NULL END\r\n\t\tEND AS flight_ret_first_date\r\n\r\n\t-- Service and subservice\r\n\tFROM {{ref('with_fl_acr_booking_service')}} bk_ser\r\n\tLEFT OUTER JOIN {{ref('with_fl_acr_service')}} ser ON bk_ser.sk_service_id = ser.sk_service_id AND bk_ser.service_version = ser.service_version\r\n\tLEFT OUTER JOIN {{ref('with_fl_acr_service_element')}} ser_e ON ser.sk_service_id = ser_e.sk_service_id AND ser.service_version = ser_e.service_version\r\n\r\n\t-- Accom\r\n\tLEFT OUTER JOIN {{ref('with_ar_sellstatic')}} sls ON ser.atcom_ser_id = sls.sell_stc_id\r\n\tLEFT OUTER JOIN {{ref('with_ar_staticstock')}} sts ON sls.stc_stk_id = sts.stc_stk_id\r\n\r\n\t-- Room\r\n\tLEFT OUTER JOIN {{ref('with_ar_sellunit')}} su ON ser_e.atcom_sub_ser_id = su.sell_unit_id\r\n\tLEFT OUTER JOIN {{ref('with_ar_staticroom')}} str ON sts.stc_stk_id = str.stc_stk_id AND su.rm_id = str.rm_id\r\n\r\n\t-- Board\r\n\tLEFT OUTER JOIN {{ref('with_ar_usercodes')}} uc_3 ON su.bb_cd_id = uc_3.user_cd_id\r\n\r\n\t-- Flight\r\n\tLEFT OUTER JOIN {{ref('with_ar_transinvroute')}} tir ON ser.atcom_ser_id = tir.trans_inv_route_id\r\n\tLEFT OUTER JOIN {{ref('with_ar_transroute')}} tr ON tir.trans_route_id = tr.trans_route_id\r\n\tLEFT OUTER JOIN {{ref('with_ar_transinvroutesector')}} tirs ON tir.trans_inv_route_id = tirs.trans_inv_route_id\r\n  LEFT OUTER JOIN {{ref('with_ar_transinvsector')}} tis ON tirs.trans_inv_sec_id = tis.trans_inv_sec_id\r\n\tLEFT OUTER JOIN {{ref('with_ar_point')}} dpt ON ser.atcom_dep_point_id = dpt.pt_id\r\n\tLEFT OUTER JOIN {{ref('with_ar_point')}} apt ON ser.atcom_arr_point_id = apt.pt_id\r\n\r\n\tORDER BY\r\n\t\tbk_ser.sk_booking_id\r\n\t\t,bk_ser.booking_version\r\n\t\t,ser.source_stock_type_code\r\n\r\n)\r\n,booking_fact_1 AS (\r\n  SELECT DISTINCT\r\n    CASE WHEN bk.atcom_res_id IS NULL THEN NULL ELSE 'UKATCOM|' || bk.atcom_res_id || '|' || bk.booking_version END AS bk_booking\r\n    ,CASE WHEN\r\n        -- All accom services cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        =\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN 'U'\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n      ELSE\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN 'U'\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n    END AS bk_primary_accom\r\n    ,CASE WHEN\r\n        -- All accom services cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        =\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN 'U'\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n      ELSE\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN 'U'\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n    END AS bk_primary_room\r\n    ,COALESCE(\r\n      CASE WHEN\r\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\r\n        AND COUNT(DISTINCT bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) > 1\r\n          THEN 'MULTI'\r\n      WHEN\r\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\r\n        AND COUNT(DISTINCT bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = 1\r\n          THEN 'UKATCOM|' || MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id)\r\n      WHEN SUM(bs.flight_out_count) OVER (PARTITION BY bk.atcom_res_id) > 1\r\n        THEN 'MULTI'\r\n        ELSE 'UKATCOM|' || MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id)\r\n      END\r\n    , 'U') AS bk_first_flight\r\n    ,COALESCE(\r\n      CASE WHEN\r\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\r\n          THEN NULL\r\n      WHEN SUM(bs.flight_ret_count) OVER (PARTITION BY bk.atcom_res_id) > 1\r\n        THEN 'MULTI'\r\n        ELSE 'UKATCOM|' || MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\r\n      END\r\n    , 'U') AS bk_last_flight\r\n    ,CASE WHEN ofn.cd IS NULL\r\n      THEN 'UKATCOM|U'\r\n      ELSE 'UKATCOM|' || ofn.cd\r\n    END AS bk_source_market\r\n    ,'UKATCOM' AS bk_originating_system\r\n    ,CASE WHEN\r\n        -- Third party flight\r\n        SUM(CASE WHEN bs.tpf_indicator = 'Y' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n          THEN 'UKATCOM|3PF'\r\n\r\n      WHEN\r\n        -- Accommodation and Flight Package\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGAF'\r\n\r\n      WHEN\r\n        -- Cruise and Flight Package\r\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) > 0\r\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGCF'\r\n\r\n      WHEN\r\n        -- Cruise and Accommodation and Flight Package\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) > 0\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGCAF'\r\n\r\n      WHEN\r\n        -- Multi Accommodation and Flight Package\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMAF'\r\n\r\n      WHEN\r\n        -- Multi Cruise and Flight Package\r\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMCF'\r\n\r\n      WHEN\r\n        -- Multi Accommodation and One Cruise and Flight Package\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMACF'\r\n\r\n      WHEN\r\n        -- Multi Cruise and One Accommodation and Flight Package\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMCAF'\r\n\r\n      WHEN\r\n        -- Multi Accommodation and Multi Cruise and Flight Package\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMAMCF'\r\n\r\n      WHEN\r\n        -- Single Accommodation Only\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCA'\r\n\r\n      WHEN\r\n        -- Multi Accommodation Only\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCMA'\r\n\r\n      WHEN\r\n        -- Accommodation and Flight Other\r\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 1\r\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCOTH'\r\n\r\n      WHEN\r\n        -- Flight Only Return Outbound First\r\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id) < MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id)\r\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTROF'\r\n\r\n      WHEN\r\n        -- Flight Only Return Inbound First\r\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id) < MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id)\r\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTRIF'\r\n\r\n      WHEN\r\n        -- Flight only same day return\r\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id) = MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id)\r\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTSDR'\r\n\r\n      WHEN\r\n        -- Flight Only One Way Outbound\r\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTOBO'\r\n\r\n      WHEN\r\n        -- Flight Only One Way Inbound\r\n        SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTIBO'\r\n\r\n      WHEN\r\n        -- Single Cruise Only\r\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\r\n          THEN 'UKATCOM|CRU' -- Granular code = 'CRUSGL'\r\n\r\n      WHEN\r\n        -- Multi Cruise Only\r\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n          THEN 'UKATCOM|CRU' -- Granular code = 'CRUMLT'\r\n\r\n      WHEN\r\n        -- Third party\r\n        SUM(bs.thirdparty_count) OVER (PARTITION BY bs.sk_booking_id) > 0\r\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\r\n          THEN 'UKATCOM|TPB' -- Granular code = 'TPB'\r\n\r\n      ELSE 'UKATCOM|OTH'\r\n    END AS bk_booking_type\r\n    ,CASE WHEN bk.booking_status IS NULL\r\n      THEN 'U'\r\n      ELSE 'UKATCOM|' || bk.booking_status\r\n    END AS bk_booking_status\r\n    ,bk.atcom_res_id AS source_booking_id\r\n    --,bk.atcom_res_version AS source_booking_version\r\n    ,bk.booking_version AS source_booking_version -- swapped to FL version not Atcom version PiT\r\n    ,COALESCE(CAST(bk.source_created_on AS TIMESTAMP), CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_created_datetime\r\n    ,COALESCE(bk.confirmed_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_confirmed_datetime\r\n    ,COALESCE(bk.cancelled_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_cancelled_datetime\r\n    ,gs.group_season_code AS group_season\r\n    ,CASE WHEN bk.sk_season_id IS NULL OR bk.sk_season_id = -1 OR bk.sk_season_id = -2\r\n      THEN NULL\r\n      ELSE\r\n        CASE WHEN SUBSTRING(bk.sk_season_id, 5, 2) = 01\r\n          THEN 'S' || SUBSTRING(bk.sk_season_id, 3, 2)\r\n          ELSE 'W' || SUBSTRING(bk.sk_season_id, 3, 2)\r\n        END\r\n    END AS sm_season\r\n    ,CASE WHEN uc.cd IS NULL\r\n      THEN NULL\r\n      ELSE 'UKATCOM|' || uc.cd\r\n    END AS channel_code\r\n    ,CASE WHEN uc.name IS NULL\r\n      THEN NULL\r\n      ELSE 'UKATCOM|' || uc.name\r\n    END AS channel_desc\r\n    ,CASE WHEN\r\n        -- All accom services cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        =\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN NULL\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n      ELSE\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN NULL\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n    END AS booked_board_code\r\n    ,CASE WHEN\r\n        -- All accom services cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        =\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN NULL\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n      ELSE\r\n        CASE WHEN\r\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n            = 0\r\n          THEN NULL\r\n          ELSE\r\n            CASE WHEN\r\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              > 1\r\n            THEN 'MULTI'\r\n\r\n            ELSE 'UKATCOM|' || COALESCE(\r\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\r\n              )\r\n            END\r\n        END\r\n    END AS booked_board_name\r\n    ,CASE WHEN\r\n        -- All accom services are cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        CASE WHEN SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n          THEN 'Y'\r\n          ELSE 'N'\r\n        END\r\n      ELSE\r\n        CASE WHEN SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n          THEN 'Y'\r\n          ELSE 'N'\r\n        END\r\n    END AS multi_room_booking\r\n    ,CASE WHEN\r\n        -- All accom services are cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      ELSE\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n    END AS number_of_booked_rooms\r\n    ,CASE WHEN\r\n        -- All accom services are cancelled\r\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\r\n      THEN\r\n        CASE WHEN COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n          THEN 'Y'\r\n          ELSE 'N'\r\n        END\r\n      ELSE\r\n        CASE WHEN COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id) > 1\r\n          THEN 'Y'\r\n          ELSE 'N'\r\n        END\r\n    END AS multi_centre_booking\r\n    ,COALESCE(bk.season_date,CAST('2999-12-31 23:59:59.0' AS DATE)) AS departure_date\r\n    ,COALESCE(\r\n      bs.max_multi_center_date,\r\n      bs.max_accom_date,\r\n      bs.max_cruise_date,\r\n      bs.max_flight_date,\r\n      CAST('2999-12-31 23:59:59.0' AS DATE)\r\n    ) AS return_date\r\n    ,CASE WHEN\r\n      COALESCE(bk.season_date, CAST('2999-12-31 23:59:59.0' AS DATE)) = CAST('2999-12-31 23:59:59.0' AS DATE)\r\n    OR\r\n      COALESCE(\r\n        bs.max_multi_center_date,\r\n        bs.max_accom_date,\r\n        bs.max_cruise_date,\r\n        bs.max_flight_date,\r\n        CAST('2999-12-31 23:59:59.0' AS DATE)\r\n      ) = CAST('2999-12-31 23:59:59.0' AS DATE)\r\n    THEN 0\r\n    ELSE\r\n      DATEDIFF('DAY',\r\n        bk.season_date\r\n      ,\r\n        COALESCE(\r\n          bs.max_multi_center_date,\r\n          bs.max_accom_date,\r\n          bs.max_cruise_date,\r\n          bs.max_flight_date)\r\n      )\r\n    END\tAS DURATION\r\n    ,COALESCE(bk.number_of_adults, 0) AS std_number_of_booking_adult_pax\r\n    ,COALESCE(bk.number_of_children, 0) AS std_number_of_booking_child_pax\r\n    ,COALESCE(bk.number_of_infants, 0) AS std_number_of_booking_infant_pax\r\n    ,COALESCE(bk.number_of_passengers, 0) AS std_number_of_booking_pax\r\n    ,COALESCE(bk.number_of_adults, 0) AS sm_number_of_booking_adult_pax\r\n    ,0 AS sm_number_of_booking_teenager_pax\r\n    ,COALESCE(bk.number_of_children, 0) AS sm_number_of_booking_child_pax\r\n    ,COALESCE(bk.number_of_infants, 0) AS sm_number_of_booking_infant_pax\r\n    ,COALESCE(bk.number_of_passengers, 0) AS sm_number_of_booking_pax\r\n    ,CASE WHEN COUNT(DISTINCT bs.min_flight_gateway) OVER (PARTITION BY bk.atcom_res_id) > 1\r\n      THEN 'MULTI'\r\n      ELSE MIN(bs.min_flight_gateway) OVER (PARTITION BY bk.atcom_res_id)\r\n    END AS primary_gateway\r\n    -- ,cur.name AS currency\r\n    ,'Insert' AS record_type\r\n    ,COALESCE(bk.effective_from, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS effective_from\r\n    ,COALESCE(\r\n      bk.lead_effective_from\r\n      ,bk.effective_to\r\n      ,CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)\r\n    ) AS effective_to\r\n    ,COALESCE(bk.dwh_created_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS sm_created_datetime\r\n    ,COALESCE(bk.dwh_modified_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS sm_updated_datetime\r\n    ,CAST(CONVERT_TIMEZONE('Europe/London',CURRENT_TIMESTAMP()) AS TIMESTAMP_NTZ) AS dm_created_datetime\r\n\r\n  FROM {{ref('with_fl_acr_booking')}} bk\r\n  LEFT OUTER JOIN booking_service bs ON bk.sk_booking_id = bs.sk_booking_id AND bk.booking_version = bs.booking_version\r\n\r\n  -- Group Season\r\n  LEFT OUTER JOIN {{ref('with_dates')}} gs ON CAST(COALESCE(SUBSTRING(bk.season_date, 1, 4) || SUBSTRING(bk.season_date, 6, 2) || SUBSTRING(bk.season_date, 9, 2), 20991231) AS INTEGER) = gs.bk_date\r\n\r\n  -- Market source\r\n  LEFT OUTER JOIN {{ref('with_ar_agent')}} ag ON bk.atcom_agent_id = ag.agt_id\r\n\r\n  -- V1.06 Version of source market joins\r\n  LEFT OUTER JOIN {{ref('with_ar_market')}} m ON bk.atcom_market_id = m.mkt_id\r\n  LEFT OUTER JOIN {{ref('with_ar_officename')}} ofn ON m.off_id = ofn.off_name_id\r\n\r\n  -- Channel\r\n  LEFT OUTER JOIN {{ref('with_ar_usercodes')}} uc ON ag.agt_tp_id = uc.user_cd_id\r\n\r\n  -- Currency\r\n  -- LEFT OUTER JOIN ar_currency cur ON bk.atcom_sell_currency_id = cur.cur_id\r\n\r\n  WHERE bk_booking IS NOT NULL\r\n)\r\n\r\nSELECT\r\n  bf_1.bk_booking,\r\n  bf_1.bk_primary_accom,\r\n  bf_1.bk_primary_room,\r\n  bf_1.bk_first_flight,\r\n  bf_1.bk_last_flight,\r\n  bf_1.bk_source_market,\r\n  bf_1.bk_originating_system,\r\n  bf_1.bk_booking_type,\r\n  bf_1.bk_booking_status,\r\n  bf_1.source_booking_id,\r\n  bf_1.source_booking_version,\r\n  bf_1.booking_created_datetime,\r\n  bf_1.booking_confirmed_datetime,\r\n  bf_1.booking_cancelled_datetime,\r\n  bf_1.group_season,\r\n  bf_1.sm_season,\r\n  bf_1.channel_code,\r\n  bf_1.channel_desc,\r\n  bf_1.booked_board_code,\r\n  bf_1.booked_board_name,\r\n  bf_1.multi_room_booking,\r\n  bf_1.number_of_booked_rooms,\r\n  bf_1.multi_centre_booking,\r\n  bf_1.departure_date,\r\n  bf_1.return_date,\r\n  bf_1.duration,\r\n  bf_1.std_number_of_booking_adult_pax,\r\n  bf_1.std_number_of_booking_child_pax,\r\n  bf_1.std_number_of_booking_infant_pax,\r\n  bf_1.std_number_of_booking_pax,\r\n  bf_1.sm_number_of_booking_adult_pax,\r\n  bf_1.sm_number_of_booking_teenager_pax,\r\n  bf_1.sm_number_of_booking_child_pax,\r\n  bf_1.sm_number_of_booking_infant_pax,\r\n  bf_1.sm_number_of_booking_pax,\r\n  bf_1.primary_gateway,\r\n  COALESCE(bfm.sm_currency, fx.bk_sm_ccy, 'U') AS sm_currency,\r\n  COALESCE(bfm.sm_revenue, 0) AS sm_revenue,\r\n  COALESCE(bfm.sm_cnx_and_amend_revenue, 0) AS sm_cnx_and_amend_revenue,\r\n  COALESCE(bfm.sm_accommodation_costs, 0) AS sm_accommodation_costs,\r\n  COALESCE(bfm.sm_early_booking_discounts, 0) AS sm_early_booking_discounts,\r\n  COALESCE(bfm.sm_late_booking_discounts, 0) AS sm_late_booking_discounts,\r\n  COALESCE(bfm.sm_flying_costs, 0) AS sm_flying_costs,\r\n  COALESCE(bfm.sm_other_costs, 0) AS sm_other_costs,\r\n  COALESCE(bfm.sm_distribution_costs, 0) AS sm_distribution_costs,\r\n  COALESCE(bfm.sm_non_margin_items, 0) AS sm_non_margin_items,\r\n  COALESCE(bfm.sm_margin, 0) AS sm_margin,\r\n  COALESCE(bfm.smg_currency, fx.bk_smg_ccy, 'U') AS smg_currency,\r\n  COALESCE(bfm.smg_revenue, 0) AS smg_revenue,\r\n  COALESCE(bfm.smg_cnx_and_amend_revenue, 0) AS smg_cnx_and_amend_revenue,\r\n  COALESCE(bfm.smg_accommodation_costs, 0) AS smg_accommodation_costs,\r\n  COALESCE(bfm.smg_early_booking_discounts, 0) AS smg_early_booking_discounts,\r\n  COALESCE(bfm.smg_late_booking_discounts, 0) AS smg_late_booking_discounts,\r\n  COALESCE(bfm.smg_flying_costs, 0) AS smg_flying_costs,\r\n  COALESCE(bfm.smg_other_costs, 0) AS smg_other_costs,\r\n  COALESCE(bfm.smg_distribution_costs, 0) AS smg_distribution_costs,\r\n  COALESCE(bfm.smg_non_margin_items, 0) AS smg_non_margin_items,\r\n  COALESCE(bfm.smg_margin, 0) AS smg_margin,\r\n  COALESCE(bfm.rep_currency, fx.bk_rep_ccy, 'U') AS rep_currency,\r\n  COALESCE(bfm.rep_revenue, 0) AS rep_revenue,\r\n  COALESCE(bfm.rep_cnx_and_amend_revenue, 0) AS rep_cnx_and_amend_revenue,\r\n  COALESCE(bfm.rep_accommodation_costs, 0) AS rep_accommodation_costs,\r\n  COALESCE(bfm.rep_early_booking_discounts, 0) AS rep_early_booking_discounts,\r\n  COALESCE(bfm.rep_late_booking_discounts, 0) AS rep_late_booking_discounts,\r\n  COALESCE(bfm.rep_flying_costs, 0) AS rep_flying_costs,\r\n  COALESCE(bfm.rep_other_costs, 0) AS rep_other_costs,\r\n  COALESCE(bfm.rep_distribution_costs, 0) AS rep_distribution_costs,\r\n  COALESCE(bfm.rep_non_margin_items, 0) AS rep_non_margin_items,\r\n  COALESCE(bfm.rep_margin, 0) AS rep_margin,\r\n  COALESCE(bfm.ffd_flag, 'N') AS ffd_flag,\r\n  bf_1.record_type,\r\n  bf_1.effective_from,\r\n  bf_1.effective_to,\r\n  bf_1.sm_created_datetime,\r\n  bf_1.sm_updated_datetime,\r\n  bf_1.dm_created_datetime,\r\n  CASE WHEN bf_1.source_booking_version = MAX(bf_1.source_booking_version) OVER (PARTITION BY LEFT(bf_1.bk_booking, LENGTH(bf_1.bk_booking) - REGEXP_INSTR(bf_1.bk_booking, '|', 2)))\r\n    THEN 'Y'\r\n    ELSE 'N'\r\n  END AS latest_record_indicator\r\nFROM booking_fact_1 bf_1\r\nLEFT OUTER JOIN {{ref('with_booking_fact_margin')}} bfm ON bf_1.bk_booking = bfm.bk_booking\r\nLEFT OUTER JOIN opa_fl_all.source_market sm ON bf_1.bk_source_market = sm.bk_source_market\r\nLEFT OUTER JOIN opa_fl_uk.fx_rates_dim_uk fx\r\n  ON bf_1.sm_season = fx.bk_season\r\n  AND sm.source_market_code = fx.source_market_code\r\nORDER BY\r\n  bk_booking\r\n  ,source_booking_version\r\n  ,record_type DESC", "refs": [["with_fl_acr_booking_service"], ["with_fl_acr_service"], ["with_fl_acr_service_element"], ["with_ar_sellstatic"], ["with_ar_staticstock"], ["with_ar_sellunit"], ["with_ar_staticroom"], ["with_ar_usercodes"], ["with_ar_transinvroute"], ["with_ar_transroute"], ["with_ar_transinvroutesector"], ["with_ar_transinvsector"], ["with_ar_point"], ["with_ar_point"], ["with_fl_acr_booking"], ["with_dates"], ["with_ar_agent"], ["with_ar_market"], ["with_ar_officename"], ["with_ar_usercodes"], ["with_booking_fact_margin"]], "sources": [], "depends_on": {"nodes": ["model.dbt_test.with_fl_acr_booking_service", "model.dbt_test.with_fl_acr_service", "model.dbt_test.with_fl_acr_service_element", "model.dbt_test.with_ar_sellstatic", "model.dbt_test.with_ar_staticstock", "model.dbt_test.with_ar_sellunit", "model.dbt_test.with_ar_staticroom", "model.dbt_test.with_ar_usercodes", "model.dbt_test.with_ar_transinvroute", "model.dbt_test.with_ar_transroute", "model.dbt_test.with_ar_transinvroutesector", "model.dbt_test.with_ar_transinvsector", "model.dbt_test.with_ar_point", "model.dbt_test.with_ar_point", "model.dbt_test.with_fl_acr_booking", "model.dbt_test.with_dates", "model.dbt_test.with_ar_agent", "model.dbt_test.with_ar_market", "model.dbt_test.with_ar_officename", "model.dbt_test.with_ar_usercodes", "model.dbt_test.with_booking_fact_margin"], "macros": []}, "unique_id": "model.dbt_test.booking_fact_uk", "empty": false, "fqn": ["dbt_test", "booking_fact_uk"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "column_types": {}, "vars": {}}, "schema": "DBT_TEST", "database": "OPA_DEV", "alias": "booking_fact_uk", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nWITH booking_service AS (\n\tSELECT\n\t\tbk_ser.sk_booking_id\n\t\t,bk_ser.booking_version\n\t\t,bk_ser.sk_service_id\n\t\t,bk_ser.service_version\n\t\t,bk_ser.sk_booking_service_id\n\t\t,ser.service_type\n\t\t,ser.source_stock_type_code\n\t\t,ser.sell_type\n\t\t,ser.service_status\n\t\t,ser.flight_type_code\n\t\t,ser.service_start_date1\n\t\t,ser.service_end_date1\n\t\t,tis.dep_dt_tm\n\t\t,ser.departure_flight_number\n\t\t,ser.direction\n\t\t,tr.route_cd\n\t\t,dpt.pt_cd\n\t\t,CASE WHEN\n\t\t\t-- All flight cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tTHEN apt.pt_cd\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tAND ser.service_status = 'CON'\n\t\t\t\tTHEN apt.pt_cd\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tEND AS min_flight_gateway\n\n\t\t,CASE WHEN\n\t\t\t-- All flight cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\tAND ser.service_status = 'CON'\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tEND\tAS min_flight_id\n\n\t\t,CASE WHEN\n\t\t\t-- All flight cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMAX(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMAX(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\tAND ser.service_status = 'CON'\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tEND AS max_flight_id\n\n\n\t\t-- MULTICENTRE\n\t\t,CASE WHEN\n\t\t\t-- All multicentre services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND\tAS min_multi_center_date\n\n\t\t,CASE WHEN\n\t\t\t-- All multicentre services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS max_multi_center_date\n\n\n\t\t-- ACCOM\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU'))\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS min_accom_date\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU'))\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS max_accom_date\n\n\n\t\t-- CRUISE\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS min_cruise_date\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND max_cruise_date\n\n\n\t\t-- FLIGHT\n\t\t,CASE WHEN\n\t\t\t-- All flight services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS min_flight_date\n\t\t,CASE WHEN\n\t\t\t-- All flight services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND\tAS max_flight_date\n\n\t\t,sts.cd AS accom\n\t\t,su.bb_cd_id AS board_cd\n\t\t,uc_3.name AS board_name\n\t\t,str.stc_rm_id AS room\n\n\t\t-- Booking type derivation part 1\n\t\t,CASE WHEN\n\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\tTHEN 0\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t=\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\tOR\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\tTHEN 1\n\t\t\tELSE 0\n\t\t\tEND\n\t\tEND AS tpf_out_count\n\t\t,CASE WHEN\n\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\tTHEN 0\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t=\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\tOR\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\tTHEN 1\n\t\t\tELSE 0\n\t\t\tEND\n\t\tEND AS tpf_in_count\n\t\t,CASE WHEN\n\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\t\t\tTHEN 0\n\t\t\t\tELSE\n\t\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t=\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\t\t\tOR\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\t\t\tTHEN 1\n\t\t\t\t\tELSE 0\n\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t+\n\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\t\t\tTHEN 0\n\t\t\t\tELSE\n\t\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t=\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\t\t\tOR\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\t\t\tTHEN 1\n\t\t\t\t\tELSE 0\n\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t> 0\n\t\t\tTHEN 'Y'\n\t\t\tELSE 'N'\n\t\tEND AS tpf_indicator\n\t\t,CASE WHEN\n\t\t\t\t-- All accom cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS accom_count\n\t\t,CASE WHEN\n\t\t\t\t-- All cruise cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS cruise_count\n\t\t,CASE WHEN\n\t\t\t\t-- All flight out cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS flight_out_count\n\t\t,CASE WHEN\n\t\t\t\t-- All flight in cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS flight_ret_count\n\t\t,CASE WHEN\n\t\t\t\t-- All ahoc services cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'AHOC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'AHOC' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'AHOC' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS thirdparty_count\n\n\t\t,CASE WHEN\n\t\t\t\t-- All flight out first date cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN ser.service_start_date1 ELSE NULL END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN ser.service_start_date1 ELSE NULL END\n\t\tEND AS flight_out_first_date\n\t\t,CASE WHEN\n\t\t\t\t-- All flight in first date cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN ser.service_start_date1 ELSE NULL END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN ser.service_start_date1 ELSE NULL END\n\t\tEND AS flight_ret_first_date\n\n\t-- Service and subservice\n\tFROM OPA_DEV.DBT_TEST.with_fl_acr_booking_service bk_ser\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_fl_acr_service ser ON bk_ser.sk_service_id = ser.sk_service_id AND bk_ser.service_version = ser.service_version\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_fl_acr_service_element ser_e ON ser.sk_service_id = ser_e.sk_service_id AND ser.service_version = ser_e.service_version\n\n\t-- Accom\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_sellstatic sls ON ser.atcom_ser_id = sls.sell_stc_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_staticstock sts ON sls.stc_stk_id = sts.stc_stk_id\n\n\t-- Room\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_sellunit su ON ser_e.atcom_sub_ser_id = su.sell_unit_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_staticroom str ON sts.stc_stk_id = str.stc_stk_id AND su.rm_id = str.rm_id\n\n\t-- Board\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_usercodes uc_3 ON su.bb_cd_id = uc_3.user_cd_id\n\n\t-- Flight\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transinvroute tir ON ser.atcom_ser_id = tir.trans_inv_route_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transroute tr ON tir.trans_route_id = tr.trans_route_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transinvroutesector tirs ON tir.trans_inv_route_id = tirs.trans_inv_route_id\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transinvsector tis ON tirs.trans_inv_sec_id = tis.trans_inv_sec_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_point dpt ON ser.atcom_dep_point_id = dpt.pt_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_point apt ON ser.atcom_arr_point_id = apt.pt_id\n\n\tORDER BY\n\t\tbk_ser.sk_booking_id\n\t\t,bk_ser.booking_version\n\t\t,ser.source_stock_type_code\n\n)\n,booking_fact_1 AS (\n  SELECT DISTINCT\n    CASE WHEN bk.atcom_res_id IS NULL THEN NULL ELSE 'UKATCOM|' || bk.atcom_res_id || '|' || bk.booking_version END AS bk_booking\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS bk_primary_accom\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS bk_primary_room\n    ,COALESCE(\n      CASE WHEN\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n        AND COUNT(DISTINCT bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) > 1\n          THEN 'MULTI'\n      WHEN\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n        AND COUNT(DISTINCT bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = 1\n          THEN 'UKATCOM|' || MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n      WHEN SUM(bs.flight_out_count) OVER (PARTITION BY bk.atcom_res_id) > 1\n        THEN 'MULTI'\n        ELSE 'UKATCOM|' || MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n      END\n    , 'U') AS bk_first_flight\n    ,COALESCE(\n      CASE WHEN\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n          THEN NULL\n      WHEN SUM(bs.flight_ret_count) OVER (PARTITION BY bk.atcom_res_id) > 1\n        THEN 'MULTI'\n        ELSE 'UKATCOM|' || MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n      END\n    , 'U') AS bk_last_flight\n    ,CASE WHEN ofn.cd IS NULL\n      THEN 'UKATCOM|U'\n      ELSE 'UKATCOM|' || ofn.cd\n    END AS bk_source_market\n    ,'UKATCOM' AS bk_originating_system\n    ,CASE WHEN\n        -- Third party flight\n        SUM(CASE WHEN bs.tpf_indicator = 'Y' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|3PF'\n\n      WHEN\n        -- Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGAF'\n\n      WHEN\n        -- Cruise and Flight Package\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) > 0\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGCF'\n\n      WHEN\n        -- Cruise and Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) > 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGCAF'\n\n      WHEN\n        -- Multi Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMAF'\n\n      WHEN\n        -- Multi Cruise and Flight Package\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMCF'\n\n      WHEN\n        -- Multi Accommodation and One Cruise and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMACF'\n\n      WHEN\n        -- Multi Cruise and One Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMCAF'\n\n      WHEN\n        -- Multi Accommodation and Multi Cruise and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMAMCF'\n\n      WHEN\n        -- Single Accommodation Only\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCA'\n\n      WHEN\n        -- Multi Accommodation Only\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCMA'\n\n      WHEN\n        -- Accommodation and Flight Other\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 1\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCOTH'\n\n      WHEN\n        -- Flight Only Return Outbound First\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id) < MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id)\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTROF'\n\n      WHEN\n        -- Flight Only Return Inbound First\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id) < MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id)\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTRIF'\n\n      WHEN\n        -- Flight only same day return\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id) = MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id)\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTSDR'\n\n      WHEN\n        -- Flight Only One Way Outbound\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTOBO'\n\n      WHEN\n        -- Flight Only One Way Inbound\n        SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTIBO'\n\n      WHEN\n        -- Single Cruise Only\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|CRU' -- Granular code = 'CRUSGL'\n\n      WHEN\n        -- Multi Cruise Only\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|CRU' -- Granular code = 'CRUMLT'\n\n      WHEN\n        -- Third party\n        SUM(bs.thirdparty_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|TPB' -- Granular code = 'TPB'\n\n      ELSE 'UKATCOM|OTH'\n    END AS bk_booking_type\n    ,CASE WHEN bk.booking_status IS NULL\n      THEN 'U'\n      ELSE 'UKATCOM|' || bk.booking_status\n    END AS bk_booking_status\n    ,bk.atcom_res_id AS source_booking_id\n    --,bk.atcom_res_version AS source_booking_version\n    ,bk.booking_version AS source_booking_version -- swapped to FL version not Atcom version PiT\n    ,COALESCE(CAST(bk.source_created_on AS TIMESTAMP), CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_created_datetime\n    ,COALESCE(bk.confirmed_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_confirmed_datetime\n    ,COALESCE(bk.cancelled_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_cancelled_datetime\n    ,gs.group_season_code AS group_season\n    ,CASE WHEN bk.sk_season_id IS NULL OR bk.sk_season_id = -1 OR bk.sk_season_id = -2\n      THEN NULL\n      ELSE\n        CASE WHEN SUBSTRING(bk.sk_season_id, 5, 2) = 01\n          THEN 'S' || SUBSTRING(bk.sk_season_id, 3, 2)\n          ELSE 'W' || SUBSTRING(bk.sk_season_id, 3, 2)\n        END\n    END AS sm_season\n    ,CASE WHEN uc.cd IS NULL\n      THEN NULL\n      ELSE 'UKATCOM|' || uc.cd\n    END AS channel_code\n    ,CASE WHEN uc.name IS NULL\n      THEN NULL\n      ELSE 'UKATCOM|' || uc.name\n    END AS channel_desc\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS booked_board_code\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS booked_board_name\n    ,CASE WHEN\n        -- All accom services are cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n      ELSE\n        CASE WHEN SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n    END AS multi_room_booking\n    ,CASE WHEN\n        -- All accom services are cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      ELSE\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n    END AS number_of_booked_rooms\n    ,CASE WHEN\n        -- All accom services are cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n      ELSE\n        CASE WHEN COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n    END AS multi_centre_booking\n    ,COALESCE(bk.season_date,CAST('2999-12-31 23:59:59.0' AS DATE)) AS departure_date\n    ,COALESCE(\n      bs.max_multi_center_date,\n      bs.max_accom_date,\n      bs.max_cruise_date,\n      bs.max_flight_date,\n      CAST('2999-12-31 23:59:59.0' AS DATE)\n    ) AS return_date\n    ,CASE WHEN\n      COALESCE(bk.season_date, CAST('2999-12-31 23:59:59.0' AS DATE)) = CAST('2999-12-31 23:59:59.0' AS DATE)\n    OR\n      COALESCE(\n        bs.max_multi_center_date,\n        bs.max_accom_date,\n        bs.max_cruise_date,\n        bs.max_flight_date,\n        CAST('2999-12-31 23:59:59.0' AS DATE)\n      ) = CAST('2999-12-31 23:59:59.0' AS DATE)\n    THEN 0\n    ELSE\n      DATEDIFF('DAY',\n        bk.season_date\n      ,\n        COALESCE(\n          bs.max_multi_center_date,\n          bs.max_accom_date,\n          bs.max_cruise_date,\n          bs.max_flight_date)\n      )\n    END\tAS DURATION\n    ,COALESCE(bk.number_of_adults, 0) AS std_number_of_booking_adult_pax\n    ,COALESCE(bk.number_of_children, 0) AS std_number_of_booking_child_pax\n    ,COALESCE(bk.number_of_infants, 0) AS std_number_of_booking_infant_pax\n    ,COALESCE(bk.number_of_passengers, 0) AS std_number_of_booking_pax\n    ,COALESCE(bk.number_of_adults, 0) AS sm_number_of_booking_adult_pax\n    ,0 AS sm_number_of_booking_teenager_pax\n    ,COALESCE(bk.number_of_children, 0) AS sm_number_of_booking_child_pax\n    ,COALESCE(bk.number_of_infants, 0) AS sm_number_of_booking_infant_pax\n    ,COALESCE(bk.number_of_passengers, 0) AS sm_number_of_booking_pax\n    ,CASE WHEN COUNT(DISTINCT bs.min_flight_gateway) OVER (PARTITION BY bk.atcom_res_id) > 1\n      THEN 'MULTI'\n      ELSE MIN(bs.min_flight_gateway) OVER (PARTITION BY bk.atcom_res_id)\n    END AS primary_gateway\n    -- ,cur.name AS currency\n    ,'Insert' AS record_type\n    ,COALESCE(bk.effective_from, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS effective_from\n    ,COALESCE(\n      bk.lead_effective_from\n      ,bk.effective_to\n      ,CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)\n    ) AS effective_to\n    ,COALESCE(bk.dwh_created_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS sm_created_datetime\n    ,COALESCE(bk.dwh_modified_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS sm_updated_datetime\n    ,CAST(CONVERT_TIMEZONE('Europe/London',CURRENT_TIMESTAMP()) AS TIMESTAMP_NTZ) AS dm_created_datetime\n\n  FROM OPA_DEV.DBT_TEST.with_fl_acr_booking bk\n  LEFT OUTER JOIN booking_service bs ON bk.sk_booking_id = bs.sk_booking_id AND bk.booking_version = bs.booking_version\n\n  -- Group Season\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_dates gs ON CAST(COALESCE(SUBSTRING(bk.season_date, 1, 4) || SUBSTRING(bk.season_date, 6, 2) || SUBSTRING(bk.season_date, 9, 2), 20991231) AS INTEGER) = gs.bk_date\n\n  -- Market source\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_agent ag ON bk.atcom_agent_id = ag.agt_id\n\n  -- V1.06 Version of source market joins\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_market m ON bk.atcom_market_id = m.mkt_id\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_officename ofn ON m.off_id = ofn.off_name_id\n\n  -- Channel\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_usercodes uc ON ag.agt_tp_id = uc.user_cd_id\n\n  -- Currency\n  -- LEFT OUTER JOIN ar_currency cur ON bk.atcom_sell_currency_id = cur.cur_id\n\n  WHERE bk_booking IS NOT NULL\n)\n\nSELECT\n  bf_1.bk_booking,\n  bf_1.bk_primary_accom,\n  bf_1.bk_primary_room,\n  bf_1.bk_first_flight,\n  bf_1.bk_last_flight,\n  bf_1.bk_source_market,\n  bf_1.bk_originating_system,\n  bf_1.bk_booking_type,\n  bf_1.bk_booking_status,\n  bf_1.source_booking_id,\n  bf_1.source_booking_version,\n  bf_1.booking_created_datetime,\n  bf_1.booking_confirmed_datetime,\n  bf_1.booking_cancelled_datetime,\n  bf_1.group_season,\n  bf_1.sm_season,\n  bf_1.channel_code,\n  bf_1.channel_desc,\n  bf_1.booked_board_code,\n  bf_1.booked_board_name,\n  bf_1.multi_room_booking,\n  bf_1.number_of_booked_rooms,\n  bf_1.multi_centre_booking,\n  bf_1.departure_date,\n  bf_1.return_date,\n  bf_1.duration,\n  bf_1.std_number_of_booking_adult_pax,\n  bf_1.std_number_of_booking_child_pax,\n  bf_1.std_number_of_booking_infant_pax,\n  bf_1.std_number_of_booking_pax,\n  bf_1.sm_number_of_booking_adult_pax,\n  bf_1.sm_number_of_booking_teenager_pax,\n  bf_1.sm_number_of_booking_child_pax,\n  bf_1.sm_number_of_booking_infant_pax,\n  bf_1.sm_number_of_booking_pax,\n  bf_1.primary_gateway,\n  COALESCE(bfm.sm_currency, fx.bk_sm_ccy, 'U') AS sm_currency,\n  COALESCE(bfm.sm_revenue, 0) AS sm_revenue,\n  COALESCE(bfm.sm_cnx_and_amend_revenue, 0) AS sm_cnx_and_amend_revenue,\n  COALESCE(bfm.sm_accommodation_costs, 0) AS sm_accommodation_costs,\n  COALESCE(bfm.sm_early_booking_discounts, 0) AS sm_early_booking_discounts,\n  COALESCE(bfm.sm_late_booking_discounts, 0) AS sm_late_booking_discounts,\n  COALESCE(bfm.sm_flying_costs, 0) AS sm_flying_costs,\n  COALESCE(bfm.sm_other_costs, 0) AS sm_other_costs,\n  COALESCE(bfm.sm_distribution_costs, 0) AS sm_distribution_costs,\n  COALESCE(bfm.sm_non_margin_items, 0) AS sm_non_margin_items,\n  COALESCE(bfm.sm_margin, 0) AS sm_margin,\n  COALESCE(bfm.smg_currency, fx.bk_smg_ccy, 'U') AS smg_currency,\n  COALESCE(bfm.smg_revenue, 0) AS smg_revenue,\n  COALESCE(bfm.smg_cnx_and_amend_revenue, 0) AS smg_cnx_and_amend_revenue,\n  COALESCE(bfm.smg_accommodation_costs, 0) AS smg_accommodation_costs,\n  COALESCE(bfm.smg_early_booking_discounts, 0) AS smg_early_booking_discounts,\n  COALESCE(bfm.smg_late_booking_discounts, 0) AS smg_late_booking_discounts,\n  COALESCE(bfm.smg_flying_costs, 0) AS smg_flying_costs,\n  COALESCE(bfm.smg_other_costs, 0) AS smg_other_costs,\n  COALESCE(bfm.smg_distribution_costs, 0) AS smg_distribution_costs,\n  COALESCE(bfm.smg_non_margin_items, 0) AS smg_non_margin_items,\n  COALESCE(bfm.smg_margin, 0) AS smg_margin,\n  COALESCE(bfm.rep_currency, fx.bk_rep_ccy, 'U') AS rep_currency,\n  COALESCE(bfm.rep_revenue, 0) AS rep_revenue,\n  COALESCE(bfm.rep_cnx_and_amend_revenue, 0) AS rep_cnx_and_amend_revenue,\n  COALESCE(bfm.rep_accommodation_costs, 0) AS rep_accommodation_costs,\n  COALESCE(bfm.rep_early_booking_discounts, 0) AS rep_early_booking_discounts,\n  COALESCE(bfm.rep_late_booking_discounts, 0) AS rep_late_booking_discounts,\n  COALESCE(bfm.rep_flying_costs, 0) AS rep_flying_costs,\n  COALESCE(bfm.rep_other_costs, 0) AS rep_other_costs,\n  COALESCE(bfm.rep_distribution_costs, 0) AS rep_distribution_costs,\n  COALESCE(bfm.rep_non_margin_items, 0) AS rep_non_margin_items,\n  COALESCE(bfm.rep_margin, 0) AS rep_margin,\n  COALESCE(bfm.ffd_flag, 'N') AS ffd_flag,\n  bf_1.record_type,\n  bf_1.effective_from,\n  bf_1.effective_to,\n  bf_1.sm_created_datetime,\n  bf_1.sm_updated_datetime,\n  bf_1.dm_created_datetime,\n  CASE WHEN bf_1.source_booking_version = MAX(bf_1.source_booking_version) OVER (PARTITION BY LEFT(bf_1.bk_booking, LENGTH(bf_1.bk_booking) - REGEXP_INSTR(bf_1.bk_booking, '|', 2)))\n    THEN 'Y'\n    ELSE 'N'\n  END AS latest_record_indicator\nFROM booking_fact_1 bf_1\nLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_booking_fact_margin bfm ON bf_1.bk_booking = bfm.bk_booking\nLEFT OUTER JOIN opa_fl_all.source_market sm ON bf_1.bk_source_market = sm.bk_source_market\nLEFT OUTER JOIN opa_fl_uk.fx_rates_dim_uk fx\n  ON bf_1.sm_season = fx.bk_season\n  AND sm.source_market_code = fx.source_market_code\nORDER BY\n  bk_booking\n  ,source_booking_version\n  ,record_type DESC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nWITH booking_service AS (\n\tSELECT\n\t\tbk_ser.sk_booking_id\n\t\t,bk_ser.booking_version\n\t\t,bk_ser.sk_service_id\n\t\t,bk_ser.service_version\n\t\t,bk_ser.sk_booking_service_id\n\t\t,ser.service_type\n\t\t,ser.source_stock_type_code\n\t\t,ser.sell_type\n\t\t,ser.service_status\n\t\t,ser.flight_type_code\n\t\t,ser.service_start_date1\n\t\t,ser.service_end_date1\n\t\t,tis.dep_dt_tm\n\t\t,ser.departure_flight_number\n\t\t,ser.direction\n\t\t,tr.route_cd\n\t\t,dpt.pt_cd\n\t\t,CASE WHEN\n\t\t\t-- All flight cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tTHEN apt.pt_cd\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tAND ser.service_status = 'CON'\n\t\t\t\tTHEN apt.pt_cd\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tEND AS min_flight_gateway\n\n\t\t,CASE WHEN\n\t\t\t-- All flight cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMIN(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\tAND ser.service_status = 'CON'\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tEND\tAS min_flight_id\n\n\t\t,CASE WHEN\n\t\t\t-- All flight cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMAX(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\tser.service_start_date1 =\n\t\t\t\t\tMAX(CASE WHEN\n\t\t\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\t\tTHEN ser.service_start_date1\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\tAND ser.service_status = 'CON'\n\t\t\t\tTHEN\n\t\t\t\t\tCASE WHEN tr.route_cd IS NULL\n\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\tser.departure_flight_number|| '|' || dpt.pt_cd || '|' || apt.pt_cd|| '|' || CAST(SUBSTR(ser.service_start_date1,1,4)||SUBSTR(ser.service_start_date1,6,2)||SUBSTR(ser.service_start_date1,9,2) AS VARCHAR)\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\ttr.route_cd || '|' || SUBSTRING(tis.dep_dt_tm, 1, 4) || SUBSTRING(tis.dep_dt_tm, 6, 2) || SUBSTRING(tis.dep_dt_tm, 9, 2)\n\t\t\t\t\t\tEND\n\t\t\t\tELSE NULL\n\t\t\tEND\n\t\tEND AS max_flight_id\n\n\n\t\t-- MULTICENTRE\n\t\t,CASE WHEN\n\t\t\t-- All multicentre services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND\tAS min_multi_center_date\n\n\t\t,CASE WHEN\n\t\t\t-- All multicentre services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'MC' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS max_multi_center_date\n\n\n\t\t-- ACCOM\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU'))\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS min_accom_date\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU'))\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'ACCM' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS max_accom_date\n\n\n\t\t-- CRUISE\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS min_cruise_date\n\t\t,CASE WHEN\n\t\t\t-- All accom services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'CRU' AND ser.service_status = 'CON')\n\t\t\t\tTHEN ser.service_end_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND max_cruise_date\n\n\n\t\t-- FLIGHT\n\t\t,CASE WHEN\n\t\t\t-- All flight services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMIN(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND AS min_flight_date\n\t\t,CASE WHEN\n\t\t\t-- All flight services cancelled\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t=\n\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tTHEN\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tELSE\n\t\t\tMAX(CASE WHEN\n\t\t\t\t\t(ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t\tOR (ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.service_status = 'CON')\n\t\t\t\t--THEN tis.dep_dt_tm END)\n\t\t\t\tTHEN ser.service_start_date1 END)\n\t\t\tOVER (PARTITION BY bk_ser.sk_booking_id)\n\t\tEND\tAS max_flight_date\n\n\t\t,sts.cd AS accom\n\t\t,su.bb_cd_id AS board_cd\n\t\t,uc_3.name AS board_name\n\t\t,str.stc_rm_id AS room\n\n\t\t-- Booking type derivation part 1\n\t\t,CASE WHEN\n\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\tTHEN 0\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t=\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\tOR\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\tTHEN 1\n\t\t\tELSE 0\n\t\t\tEND\n\t\tEND AS tpf_out_count\n\t\t,CASE WHEN\n\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\tTHEN 0\n\t\tELSE\n\t\t\tCASE WHEN\n\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t=\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\tOR\n\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\tTHEN 1\n\t\t\tELSE 0\n\t\t\tEND\n\t\tEND AS tpf_in_count\n\t\t,CASE WHEN\n\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\t\t\tTHEN 0\n\t\t\t\tELSE\n\t\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t=\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\t\t\tOR\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\t\t\tTHEN 1\n\t\t\t\t\tELSE 0\n\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t+\n\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- No outbound flight services on the booking are third party\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) = 0\n\t\t\t\tTHEN 0\n\t\t\t\tELSE\n\t\t\t\t\tCASE WHEN\n\t\t\t\t\t\t-- All outbound flight services are 3PF\n\t\t\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t\t+ SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t\t\t=\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\n\t\t\t\t\tOR\n\t\t\t\t\t\tSUM(CASE WHEN ser.flight_type_code = 'T' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id) > 1\n\t\t\t\t\tTHEN 1\n\t\t\t\t\tELSE 0\n\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t> 0\n\t\t\tTHEN 'Y'\n\t\t\tELSE 'N'\n\t\tEND AS tpf_indicator\n\t\t,CASE WHEN\n\t\t\t\t-- All accom cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code NOT IN ('MC', 'CRU') AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS accom_count\n\t\t,CASE WHEN\n\t\t\t\t-- All cruise cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'ACC' AND ser.source_stock_type_code = 'CRU' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS cruise_count\n\t\t,CASE WHEN\n\t\t\t\t-- All flight out cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS flight_out_count\n\t\t,CASE WHEN\n\t\t\t\t-- All flight in cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS flight_ret_count\n\t\t,CASE WHEN\n\t\t\t\t-- All ahoc services cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'AHOC' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'AHOC' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'AHOC' THEN 1 ELSE 0 END\n\t\t\tELSE CASE WHEN ser.service_type = 'AHOC' AND ser.service_status = 'CON' THEN 1 ELSE 0 END\n\t\tEND AS thirdparty_count\n\n\t\t,CASE WHEN\n\t\t\t\t-- All flight out first date cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' THEN ser.service_start_date1 ELSE NULL END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'OUT' AND ser.service_status = 'CON' THEN ser.service_start_date1 ELSE NULL END\n\t\tEND AS flight_out_first_date\n\t\t,CASE WHEN\n\t\t\t\t-- All flight in first date cancelled\n\t\t\t\tSUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\t\t= SUM(CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bk_ser.sk_booking_id)\n\t\t\tTHEN CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' THEN ser.service_start_date1 ELSE NULL END\n\t\t\tELSE CASE WHEN ser.service_type = 'TRS' AND ser.sell_type = 'FLT' AND ser.direction = 'IN' AND ser.service_status = 'CON' THEN ser.service_start_date1 ELSE NULL END\n\t\tEND AS flight_ret_first_date\n\n\t-- Service and subservice\n\tFROM OPA_DEV.DBT_TEST.with_fl_acr_booking_service bk_ser\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_fl_acr_service ser ON bk_ser.sk_service_id = ser.sk_service_id AND bk_ser.service_version = ser.service_version\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_fl_acr_service_element ser_e ON ser.sk_service_id = ser_e.sk_service_id AND ser.service_version = ser_e.service_version\n\n\t-- Accom\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_sellstatic sls ON ser.atcom_ser_id = sls.sell_stc_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_staticstock sts ON sls.stc_stk_id = sts.stc_stk_id\n\n\t-- Room\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_sellunit su ON ser_e.atcom_sub_ser_id = su.sell_unit_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_staticroom str ON sts.stc_stk_id = str.stc_stk_id AND su.rm_id = str.rm_id\n\n\t-- Board\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_usercodes uc_3 ON su.bb_cd_id = uc_3.user_cd_id\n\n\t-- Flight\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transinvroute tir ON ser.atcom_ser_id = tir.trans_inv_route_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transroute tr ON tir.trans_route_id = tr.trans_route_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transinvroutesector tirs ON tir.trans_inv_route_id = tirs.trans_inv_route_id\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_transinvsector tis ON tirs.trans_inv_sec_id = tis.trans_inv_sec_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_point dpt ON ser.atcom_dep_point_id = dpt.pt_id\n\tLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_point apt ON ser.atcom_arr_point_id = apt.pt_id\n\n\tORDER BY\n\t\tbk_ser.sk_booking_id\n\t\t,bk_ser.booking_version\n\t\t,ser.source_stock_type_code\n\n)\n,booking_fact_1 AS (\n  SELECT DISTINCT\n    CASE WHEN bk.atcom_res_id IS NULL THEN NULL ELSE 'UKATCOM|' || bk.atcom_res_id || '|' || bk.booking_version END AS bk_booking\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS bk_primary_accom\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN 'U'\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.room ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS bk_primary_room\n    ,COALESCE(\n      CASE WHEN\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n        AND COUNT(DISTINCT bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) > 1\n          THEN 'MULTI'\n      WHEN\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n        AND COUNT(DISTINCT bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = 1\n          THEN 'UKATCOM|' || MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n      WHEN SUM(bs.flight_out_count) OVER (PARTITION BY bk.atcom_res_id) > 1\n        THEN 'MULTI'\n        ELSE 'UKATCOM|' || MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n      END\n    , 'U') AS bk_first_flight\n    ,COALESCE(\n      CASE WHEN\n        MIN(bs.min_flight_id) OVER (PARTITION BY bk.atcom_res_id) = MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n          THEN NULL\n      WHEN SUM(bs.flight_ret_count) OVER (PARTITION BY bk.atcom_res_id) > 1\n        THEN 'MULTI'\n        ELSE 'UKATCOM|' || MIN(bs.max_flight_id) OVER (PARTITION BY bk.atcom_res_id)\n      END\n    , 'U') AS bk_last_flight\n    ,CASE WHEN ofn.cd IS NULL\n      THEN 'UKATCOM|U'\n      ELSE 'UKATCOM|' || ofn.cd\n    END AS bk_source_market\n    ,'UKATCOM' AS bk_originating_system\n    ,CASE WHEN\n        -- Third party flight\n        SUM(CASE WHEN bs.tpf_indicator = 'Y' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|3PF'\n\n      WHEN\n        -- Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGAF'\n\n      WHEN\n        -- Cruise and Flight Package\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) > 0\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGCF'\n\n      WHEN\n        -- Cruise and Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) > 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGCAF'\n\n      WHEN\n        -- Multi Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMAF'\n\n      WHEN\n        -- Multi Cruise and Flight Package\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMCF'\n\n      WHEN\n        -- Multi Accommodation and One Cruise and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMACF'\n\n      WHEN\n        -- Multi Cruise and One Accommodation and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMCAF'\n\n      WHEN\n        -- Multi Accommodation and Multi Cruise and Flight Package\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n          THEN 'UKATCOM|PKG' -- Granular code = 'PKGMAMCF'\n\n      WHEN\n        -- Single Accommodation Only\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCA'\n\n      WHEN\n        -- Multi Accommodation Only\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCMA'\n\n      WHEN\n        -- Accommodation and Flight Other\n        SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 1\n          THEN 'UKATCOM|ACC' -- Granular code = 'ACCOTH'\n\n      WHEN\n        -- Flight Only Return Outbound First\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id) < MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id)\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTROF'\n\n      WHEN\n        -- Flight Only Return Inbound First\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id) < MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id)\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTRIF'\n\n      WHEN\n        -- Flight only same day return\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND MIN(bs.flight_ret_first_date) OVER (PARTITION BY bs.sk_booking_id) = MIN(bs.flight_out_first_date) OVER (PARTITION BY bs.sk_booking_id)\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTSDR'\n\n      WHEN\n        -- Flight Only One Way Outbound\n        SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTOBO'\n\n      WHEN\n        -- Flight Only One Way Inbound\n        SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|FLT' -- Granular code = 'FLTIBO'\n\n      WHEN\n        -- Single Cruise Only\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) = 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) = 0\n          THEN 'UKATCOM|CRU' -- Granular code = 'CRUSGL'\n\n      WHEN\n        -- Multi Cruise Only\n        SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id) > 1\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|CRU' -- Granular code = 'CRUMLT'\n\n      WHEN\n        -- Third party\n        SUM(bs.thirdparty_count) OVER (PARTITION BY bs.sk_booking_id) > 0\n        AND (SUM(bs.flight_out_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.flight_ret_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n        AND (SUM(bs.accom_count) OVER (PARTITION BY bs.sk_booking_id) + SUM(bs.cruise_count) OVER (PARTITION BY bs.sk_booking_id)) = 0\n          THEN 'UKATCOM|TPB' -- Granular code = 'TPB'\n\n      ELSE 'UKATCOM|OTH'\n    END AS bk_booking_type\n    ,CASE WHEN bk.booking_status IS NULL\n      THEN 'U'\n      ELSE 'UKATCOM|' || bk.booking_status\n    END AS bk_booking_status\n    ,bk.atcom_res_id AS source_booking_id\n    --,bk.atcom_res_version AS source_booking_version\n    ,bk.booking_version AS source_booking_version -- swapped to FL version not Atcom version PiT\n    ,COALESCE(CAST(bk.source_created_on AS TIMESTAMP), CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_created_datetime\n    ,COALESCE(bk.confirmed_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_confirmed_datetime\n    ,COALESCE(bk.cancelled_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS booking_cancelled_datetime\n    ,gs.group_season_code AS group_season\n    ,CASE WHEN bk.sk_season_id IS NULL OR bk.sk_season_id = -1 OR bk.sk_season_id = -2\n      THEN NULL\n      ELSE\n        CASE WHEN SUBSTRING(bk.sk_season_id, 5, 2) = 01\n          THEN 'S' || SUBSTRING(bk.sk_season_id, 3, 2)\n          ELSE 'W' || SUBSTRING(bk.sk_season_id, 3, 2)\n        END\n    END AS sm_season\n    ,CASE WHEN uc.cd IS NULL\n      THEN NULL\n      ELSE 'UKATCOM|' || uc.cd\n    END AS channel_code\n    ,CASE WHEN uc.name IS NULL\n      THEN NULL\n      ELSE 'UKATCOM|' || uc.name\n    END AS channel_desc\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS booked_board_code\n    ,CASE WHEN\n        -- All accom services cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        =\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n          + SUM(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n      ELSE\n        CASE WHEN\n            COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n            = 0\n          THEN NULL\n          ELSE\n            CASE WHEN\n              COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              + COUNT(DISTINCT CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_cd ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              > 1\n            THEN 'MULTI'\n\n            ELSE 'UKATCOM|' || COALESCE(\n                MIN(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n                ,MIN(CASE WHEN bs.service_type = 'AHOC' AND bs.sell_type = 'ACCM' AND bs.service_status = 'CON' THEN bs.board_name ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id)\n              )\n            END\n        END\n    END AS booked_board_name\n    ,CASE WHEN\n        -- All accom services are cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n      ELSE\n        CASE WHEN SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n    END AS multi_room_booking\n    ,CASE WHEN\n        -- All accom services are cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      ELSE\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n    END AS number_of_booked_rooms\n    ,CASE WHEN\n        -- All accom services are cancelled\n        SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n        = SUM(CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CNX' THEN 1 ELSE 0 END) OVER (PARTITION BY bs.sk_booking_id)\n      THEN\n        CASE WHEN COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n      ELSE\n        CASE WHEN COUNT(DISTINCT CASE WHEN bs.service_type = 'ACC' AND bs.source_stock_type_code NOT IN ('MC') AND bs.service_status = 'CON' THEN bs.accom ELSE NULL END) OVER (PARTITION BY bs.sk_booking_id) > 1\n          THEN 'Y'\n          ELSE 'N'\n        END\n    END AS multi_centre_booking\n    ,COALESCE(bk.season_date,CAST('2999-12-31 23:59:59.0' AS DATE)) AS departure_date\n    ,COALESCE(\n      bs.max_multi_center_date,\n      bs.max_accom_date,\n      bs.max_cruise_date,\n      bs.max_flight_date,\n      CAST('2999-12-31 23:59:59.0' AS DATE)\n    ) AS return_date\n    ,CASE WHEN\n      COALESCE(bk.season_date, CAST('2999-12-31 23:59:59.0' AS DATE)) = CAST('2999-12-31 23:59:59.0' AS DATE)\n    OR\n      COALESCE(\n        bs.max_multi_center_date,\n        bs.max_accom_date,\n        bs.max_cruise_date,\n        bs.max_flight_date,\n        CAST('2999-12-31 23:59:59.0' AS DATE)\n      ) = CAST('2999-12-31 23:59:59.0' AS DATE)\n    THEN 0\n    ELSE\n      DATEDIFF('DAY',\n        bk.season_date\n      ,\n        COALESCE(\n          bs.max_multi_center_date,\n          bs.max_accom_date,\n          bs.max_cruise_date,\n          bs.max_flight_date)\n      )\n    END\tAS DURATION\n    ,COALESCE(bk.number_of_adults, 0) AS std_number_of_booking_adult_pax\n    ,COALESCE(bk.number_of_children, 0) AS std_number_of_booking_child_pax\n    ,COALESCE(bk.number_of_infants, 0) AS std_number_of_booking_infant_pax\n    ,COALESCE(bk.number_of_passengers, 0) AS std_number_of_booking_pax\n    ,COALESCE(bk.number_of_adults, 0) AS sm_number_of_booking_adult_pax\n    ,0 AS sm_number_of_booking_teenager_pax\n    ,COALESCE(bk.number_of_children, 0) AS sm_number_of_booking_child_pax\n    ,COALESCE(bk.number_of_infants, 0) AS sm_number_of_booking_infant_pax\n    ,COALESCE(bk.number_of_passengers, 0) AS sm_number_of_booking_pax\n    ,CASE WHEN COUNT(DISTINCT bs.min_flight_gateway) OVER (PARTITION BY bk.atcom_res_id) > 1\n      THEN 'MULTI'\n      ELSE MIN(bs.min_flight_gateway) OVER (PARTITION BY bk.atcom_res_id)\n    END AS primary_gateway\n    -- ,cur.name AS currency\n    ,'Insert' AS record_type\n    ,COALESCE(bk.effective_from, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS effective_from\n    ,COALESCE(\n      bk.lead_effective_from\n      ,bk.effective_to\n      ,CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)\n    ) AS effective_to\n    ,COALESCE(bk.dwh_created_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS sm_created_datetime\n    ,COALESCE(bk.dwh_modified_on, CAST('2999-12-31 23:59:59.0' AS TIMESTAMP)) AS sm_updated_datetime\n    ,CAST(CONVERT_TIMEZONE('Europe/London',CURRENT_TIMESTAMP()) AS TIMESTAMP_NTZ) AS dm_created_datetime\n\n  FROM OPA_DEV.DBT_TEST.with_fl_acr_booking bk\n  LEFT OUTER JOIN booking_service bs ON bk.sk_booking_id = bs.sk_booking_id AND bk.booking_version = bs.booking_version\n\n  -- Group Season\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_dates gs ON CAST(COALESCE(SUBSTRING(bk.season_date, 1, 4) || SUBSTRING(bk.season_date, 6, 2) || SUBSTRING(bk.season_date, 9, 2), 20991231) AS INTEGER) = gs.bk_date\n\n  -- Market source\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_agent ag ON bk.atcom_agent_id = ag.agt_id\n\n  -- V1.06 Version of source market joins\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_market m ON bk.atcom_market_id = m.mkt_id\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_officename ofn ON m.off_id = ofn.off_name_id\n\n  -- Channel\n  LEFT OUTER JOIN OPA_DEV.DBT_TEST.with_ar_usercodes uc ON ag.agt_tp_id = uc.user_cd_id\n\n  -- Currency\n  -- LEFT OUTER JOIN ar_currency cur ON bk.atcom_sell_currency_id = cur.cur_id\n\n  WHERE bk_booking IS NOT NULL\n)\n\nSELECT\n  bf_1.bk_booking,\n  bf_1.bk_primary_accom,\n  bf_1.bk_primary_room,\n  bf_1.bk_first_flight,\n  bf_1.bk_last_flight,\n  bf_1.bk_source_market,\n  bf_1.bk_originating_system,\n  bf_1.bk_booking_type,\n  bf_1.bk_booking_status,\n  bf_1.source_booking_id,\n  bf_1.source_booking_version,\n  bf_1.booking_created_datetime,\n  bf_1.booking_confirmed_datetime,\n  bf_1.booking_cancelled_datetime,\n  bf_1.group_season,\n  bf_1.sm_season,\n  bf_1.channel_code,\n  bf_1.channel_desc,\n  bf_1.booked_board_code,\n  bf_1.booked_board_name,\n  bf_1.multi_room_booking,\n  bf_1.number_of_booked_rooms,\n  bf_1.multi_centre_booking,\n  bf_1.departure_date,\n  bf_1.return_date,\n  bf_1.duration,\n  bf_1.std_number_of_booking_adult_pax,\n  bf_1.std_number_of_booking_child_pax,\n  bf_1.std_number_of_booking_infant_pax,\n  bf_1.std_number_of_booking_pax,\n  bf_1.sm_number_of_booking_adult_pax,\n  bf_1.sm_number_of_booking_teenager_pax,\n  bf_1.sm_number_of_booking_child_pax,\n  bf_1.sm_number_of_booking_infant_pax,\n  bf_1.sm_number_of_booking_pax,\n  bf_1.primary_gateway,\n  COALESCE(bfm.sm_currency, fx.bk_sm_ccy, 'U') AS sm_currency,\n  COALESCE(bfm.sm_revenue, 0) AS sm_revenue,\n  COALESCE(bfm.sm_cnx_and_amend_revenue, 0) AS sm_cnx_and_amend_revenue,\n  COALESCE(bfm.sm_accommodation_costs, 0) AS sm_accommodation_costs,\n  COALESCE(bfm.sm_early_booking_discounts, 0) AS sm_early_booking_discounts,\n  COALESCE(bfm.sm_late_booking_discounts, 0) AS sm_late_booking_discounts,\n  COALESCE(bfm.sm_flying_costs, 0) AS sm_flying_costs,\n  COALESCE(bfm.sm_other_costs, 0) AS sm_other_costs,\n  COALESCE(bfm.sm_distribution_costs, 0) AS sm_distribution_costs,\n  COALESCE(bfm.sm_non_margin_items, 0) AS sm_non_margin_items,\n  COALESCE(bfm.sm_margin, 0) AS sm_margin,\n  COALESCE(bfm.smg_currency, fx.bk_smg_ccy, 'U') AS smg_currency,\n  COALESCE(bfm.smg_revenue, 0) AS smg_revenue,\n  COALESCE(bfm.smg_cnx_and_amend_revenue, 0) AS smg_cnx_and_amend_revenue,\n  COALESCE(bfm.smg_accommodation_costs, 0) AS smg_accommodation_costs,\n  COALESCE(bfm.smg_early_booking_discounts, 0) AS smg_early_booking_discounts,\n  COALESCE(bfm.smg_late_booking_discounts, 0) AS smg_late_booking_discounts,\n  COALESCE(bfm.smg_flying_costs, 0) AS smg_flying_costs,\n  COALESCE(bfm.smg_other_costs, 0) AS smg_other_costs,\n  COALESCE(bfm.smg_distribution_costs, 0) AS smg_distribution_costs,\n  COALESCE(bfm.smg_non_margin_items, 0) AS smg_non_margin_items,\n  COALESCE(bfm.smg_margin, 0) AS smg_margin,\n  COALESCE(bfm.rep_currency, fx.bk_rep_ccy, 'U') AS rep_currency,\n  COALESCE(bfm.rep_revenue, 0) AS rep_revenue,\n  COALESCE(bfm.rep_cnx_and_amend_revenue, 0) AS rep_cnx_and_amend_revenue,\n  COALESCE(bfm.rep_accommodation_costs, 0) AS rep_accommodation_costs,\n  COALESCE(bfm.rep_early_booking_discounts, 0) AS rep_early_booking_discounts,\n  COALESCE(bfm.rep_late_booking_discounts, 0) AS rep_late_booking_discounts,\n  COALESCE(bfm.rep_flying_costs, 0) AS rep_flying_costs,\n  COALESCE(bfm.rep_other_costs, 0) AS rep_other_costs,\n  COALESCE(bfm.rep_distribution_costs, 0) AS rep_distribution_costs,\n  COALESCE(bfm.rep_non_margin_items, 0) AS rep_non_margin_items,\n  COALESCE(bfm.rep_margin, 0) AS rep_margin,\n  COALESCE(bfm.ffd_flag, 'N') AS ffd_flag,\n  bf_1.record_type,\n  bf_1.effective_from,\n  bf_1.effective_to,\n  bf_1.sm_created_datetime,\n  bf_1.sm_updated_datetime,\n  bf_1.dm_created_datetime,\n  CASE WHEN bf_1.source_booking_version = MAX(bf_1.source_booking_version) OVER (PARTITION BY LEFT(bf_1.bk_booking, LENGTH(bf_1.bk_booking) - REGEXP_INSTR(bf_1.bk_booking, '|', 2)))\n    THEN 'Y'\n    ELSE 'N'\n  END AS latest_record_indicator\nFROM booking_fact_1 bf_1\nLEFT OUTER JOIN OPA_DEV.DBT_TEST.with_booking_fact_margin bfm ON bf_1.bk_booking = bfm.bk_booking\nLEFT OUTER JOIN opa_fl_all.source_market sm ON bf_1.bk_source_market = sm.bk_source_market\nLEFT OUTER JOIN opa_fl_uk.fx_rates_dim_uk fx\n  ON bf_1.sm_season = fx.bk_season\n  AND sm.source_market_code = fx.source_market_code\nORDER BY\n  bk_booking\n  ,source_booking_version\n  ,record_type DESC", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_test\\booking_fact_uk.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "warn": null, "execution_time": 68.78199982643127, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-10-01T13:53:05.341394Z", "completed_at": "2019-10-01T13:53:05.535394Z"}, {"name": "execute", "started_at": "2019-10-01T13:53:05.536394Z", "completed_at": "2019-10-01T13:54:14.110394Z"}]}], "generated_at": "2019-10-01T13:54:14.854394Z", "elapsed_time": 84.58700013160706}